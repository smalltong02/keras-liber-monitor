#include "stdafx.h"
#include <stdio.h>
#include <windows.h>
#include <string>
#include <vector>
#include "CBaseType.h"
#include "MetadataTypeImpl.h"
#include "HipsHookTest.h"
#include "benchmark\benchmark.h"
#include "gtest\gtest.h"
#include "gmock\gmock.h"

#ifdef _FUNCTION_TEST

#define TEST_ARRAY_DIM 11
class HookMetadataTest : public testing::Test
{
protected:
    typedef struct _COAUTHIDENTITY_TEST
    {
        /* [size_is] */ USHORT *User;
        /* [range] */ ULONG_PTR UserLength;
        /* [size_is] */ USHORT *Domain;
        /* [range] */ ULONG_PTR DomainLength;
        /* [size_is] */ USHORT *Password;
        /* [range] */ ULONG PasswordLength;
        ULONG Flags;
        BSTR Description;
    } 	COAUTHIDENTITY_TEST;
    HookMetadataTest() {}
    ~HookMetadataTest() override {}

    virtual void SetUp() override {
        
    }

    void TearDown() override {
        
    }
    char test_char_val = 'A';
    wchar_t test_wchar_val = L'A';
    BYTE test_byte_val = 255;
    BOOL test_bool_val = true;
    UINT16 test_uint16_val = 65535;
    LONG test_long_val = -1;
    LONG_PTR test_long_ptr_val = -1;
    ULONG_PTR test_ulong_ptr_val = (ULONG)-1;
    FLOAT test_float_val = (FLOAT)3.1415926;
    DOUBLE test_double_val = 713.432983432134;
    ULONGLONG test_qword_val = (ULONGLONG)-1;
    HMODULE test_hmodule_val = (HMODULE)100;
    HRESULT test_hresult_val = S_FALSE;
    NTSTATUS test_ntstatus_val = 0xC0000005;
    std::wstring test_wstring_val = L"c:\\windows\\system32\\notepad.exe";
    GUID test_guid_val = { 0xdc12a681, 0x737f, 0x11cf, 0x88,0x4d,0x00,0xaa,0x00,0x4b,0x2e,0x24 };
    ULARGE_INTEGER meta_reference_val = {10000};
    WCHAR wstring_reference_val[40] = L"c:\\windows\\system32\\notepad.exe";
    UCHAR ustring_reference_val[40] = "c:\\windows\\system32\\notepad.exe";
    GUID guid_array_val[TEST_ARRAY_DIM] = {
        { 0x4590f811, 0x1d3a, 0x11d0, 0x1f, 0x89, 0x00, 0xaa, 0x00, 0x4b, 0x2e, 0x0 },
        { 0x4590f811, 0x1d3a, 0x11d0, 0x1f, 0x89, 0x00, 0xaa, 0x00, 0x4b, 0x2e, 0x1 },
        { 0x4590f811, 0x1d3a, 0x11d0, 0x1f, 0x89, 0x00, 0xaa, 0x00, 0x4b, 0x2e, 0x2 },
        { 0x4590f811, 0x1d3a, 0x11d0, 0x1f, 0x89, 0x00, 0xaa, 0x00, 0x4b, 0x2e, 0x3 },
        { 0x4590f811, 0x1d3a, 0x11d0, 0x1f, 0x89, 0x00, 0xaa, 0x00, 0x4b, 0x2e, 0x4 },
        { 0x4590f811, 0x1d3a, 0x11d0, 0x1f, 0x89, 0x00, 0xaa, 0x00, 0x4b, 0x2e, 0x5 },
        { 0x4590f811, 0x1d3a, 0x11d0, 0x1f, 0x89, 0x00, 0xaa, 0x00, 0x4b, 0x2e, 0x6 },
        { 0x4590f811, 0x1d3a, 0x11d0, 0x1f, 0x89, 0x00, 0xaa, 0x00, 0x4b, 0x2e, 0x7 },
        { 0x4590f811, 0x1d3a, 0x11d0, 0x1f, 0x89, 0x00, 0xaa, 0x00, 0x4b, 0x2e, 0x8 },
        { 0x4590f811, 0x1d3a, 0x11d0, 0x1f, 0x89, 0x00, 0xaa, 0x00, 0x4b, 0x2e, 0x9 },
        { 0x4590f811, 0x1d3a, 0x11d0, 0x1f, 0x89, 0x00, 0xaa, 0x00, 0x4b, 0x2e, 0x10 },
    };
};

// test CBaseType
TEST_F(HookMetadataTest, CBaseType_Test)
{
    std::any anyvalue;
    // test void type
    CBaseType<ULONG> t_void(CBaseDef::type_void);
    EXPECT_EQ(t_void.GetBaseDef(), CBaseDef::type_void);
    EXPECT_EQ(t_void.GetBaseSize(), 0);
    EXPECT_EQ(t_void.GetName(), "VOID");
    EXPECT_EQ(t_void.GetObSize(), 0);
    EXPECT_EQ(t_void.GetObType(), CObObject::ob_basetype);
    EXPECT_EQ(t_void.GetOp(), CObObject::op_n_equal);
    EXPECT_TRUE(t_void.IsValidValue(nullptr));
    EXPECT_TRUE(t_void.IsValidValue((char*)&test_char_val));
    anyvalue = t_void.GetCurValue();
    EXPECT_FALSE(anyvalue.has_value());
    EXPECT_FALSE(t_void.SetCurValue(std::any(test_char_val)));
    anyvalue = t_void.GetValue((char*)&test_char_val);
    EXPECT_FALSE(anyvalue.has_value());
    EXPECT_FALSE(t_void.SetValue((char*)&test_char_val, std::any(test_char_val)));
    char char_val = 'A';
    EXPECT_TRUE(t_void.Success((char*)&char_val));
    EXPECT_FALSE(t_void.Failed((char*)&char_val));
    char_val = '\0';
    EXPECT_TRUE(t_void.Success((char*)&char_val));
    EXPECT_FALSE(t_void.Failed((char*)&char_val));
    //test BYTE type
    CBaseType<BYTE> t_byte(CBaseDef::type_byte);
    EXPECT_EQ(t_byte.GetBaseDef(), CBaseDef::type_byte);
    EXPECT_EQ(t_byte.GetBaseSize(), sizeof(BYTE));
    EXPECT_EQ(t_byte.GetName(), "BYTE");
    EXPECT_EQ(t_byte.GetObSize(), sizeof(BYTE));
    EXPECT_EQ(t_byte.GetObType(), CObObject::ob_basetype);
    EXPECT_EQ(t_byte.GetOp(), CObObject::op_n_equal);
    EXPECT_FALSE(t_byte.IsValidValue(nullptr));
    EXPECT_TRUE(t_byte.IsValidValue((char*)&test_byte_val));
    anyvalue = t_byte.GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(BYTE));
    EXPECT_EQ(std::any_cast<BYTE>(anyvalue), 0);
    EXPECT_TRUE(t_byte.SetCurValue(std::any(test_byte_val)));
    anyvalue = t_byte.GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(BYTE));
    EXPECT_EQ(std::any_cast<BYTE>(anyvalue), test_byte_val);
    BYTE byte_val = 128;
    anyvalue = t_byte.GetValue((char*)&byte_val);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(BYTE));
    EXPECT_EQ(std::any_cast<BYTE>(anyvalue), byte_val);
    EXPECT_TRUE(t_byte.SetValue((char*)&test_byte_val, std::any(byte_val)));
    EXPECT_EQ(test_byte_val, byte_val);
    EXPECT_FALSE(t_byte.SetValue((char*)&test_byte_val, std::any(test_uint16_val)));
    byte_val = 0;
    EXPECT_TRUE(t_byte.Success((char*)&byte_val));
    EXPECT_FALSE(t_byte.Failed((char*)&byte_val));
    byte_val = 255;
    EXPECT_FALSE(t_byte.Success((char*)&byte_val));
    EXPECT_TRUE(t_byte.Failed((char*)&byte_val));
    // test wchar type
    CBaseType<WCHAR> t_wchar(CBaseDef::type_wchar);
    EXPECT_EQ(t_wchar.GetBaseDef(), CBaseDef::type_wchar);
    EXPECT_EQ(t_wchar.GetBaseSize(), sizeof(WCHAR));
    EXPECT_EQ(t_wchar.GetName(), "WCHAR");
    EXPECT_EQ(t_wchar.GetObSize(), sizeof(WCHAR));
    EXPECT_EQ(t_wchar.GetObType(), CObObject::ob_basetype);
    EXPECT_EQ(t_wchar.GetOp(), CObObject::op_n_equal);
    EXPECT_FALSE(t_wchar.IsValidValue(nullptr));
    EXPECT_TRUE(t_wchar.IsValidValue((char*)&test_wchar_val));
    anyvalue = t_wchar.GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(WCHAR));
    EXPECT_EQ(std::any_cast<WCHAR>(anyvalue), L'\0');
    EXPECT_TRUE(t_wchar.SetCurValue(std::any(test_wchar_val)));
    anyvalue = t_wchar.GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(WCHAR));
    EXPECT_EQ(std::any_cast<WCHAR>(anyvalue), test_wchar_val);
    WCHAR wchar_val = (WCHAR)-200;
    anyvalue = t_wchar.GetValue((char*)&wchar_val);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(WCHAR));
    EXPECT_EQ(std::any_cast<WCHAR>(anyvalue), wchar_val);
    EXPECT_TRUE(t_wchar.SetValue((char*)&test_wchar_val, std::any(wchar_val)));
    EXPECT_EQ(test_wchar_val, wchar_val);
    EXPECT_FALSE(t_wchar.SetValue((char*)&test_wchar_val, std::any(test_char_val)));
    wchar_val = L'\0';
    t_wchar.SetCurValue(std::any(wchar_val));
    EXPECT_FALSE(t_wchar.Success((char*)&wchar_val));
    EXPECT_TRUE(t_wchar.Failed((char*)&wchar_val));
    wchar_val = L'Z';
    EXPECT_TRUE(t_wchar.Success((char*)&wchar_val));
    EXPECT_FALSE(t_wchar.Failed((char*)&wchar_val));
    // test uint16 type
    CBaseType<UINT16> t_uint16(CBaseDef::type_uint16);
    EXPECT_EQ(t_uint16.GetBaseDef(), CBaseDef::type_uint16);
    EXPECT_EQ(t_uint16.GetBaseSize(), sizeof(UINT16));
    EXPECT_EQ(t_uint16.GetName(), "UINT16");
    EXPECT_EQ(t_uint16.GetObSize(), sizeof(UINT16));
    EXPECT_EQ(t_uint16.GetObType(), CObObject::ob_basetype);
    EXPECT_EQ(t_uint16.GetOp(), CObObject::op_n_equal);
    EXPECT_FALSE(t_uint16.IsValidValue(nullptr));
    EXPECT_TRUE(t_uint16.IsValidValue((char*)&test_uint16_val));
    anyvalue = t_uint16.GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(UINT16));
    EXPECT_EQ(std::any_cast<UINT16>(anyvalue), 0);
    EXPECT_TRUE(t_uint16.SetCurValue(std::any(test_uint16_val)));
    anyvalue = t_uint16.GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(UINT16));
    EXPECT_EQ(std::any_cast<UINT16>(anyvalue), test_uint16_val);
    UINT16 uint16_val = (UINT16)-100;
    anyvalue = t_uint16.GetValue((char*)&uint16_val);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(UINT16));
    EXPECT_EQ(std::any_cast<UINT16>(anyvalue), uint16_val);
    EXPECT_TRUE(t_uint16.SetValue((char*)&test_uint16_val, std::any(uint16_val)));
    EXPECT_EQ(test_uint16_val, uint16_val);
    EXPECT_FALSE(t_uint16.SetValue((char*)&test_uint16_val, std::any(test_bool_val)));
    uint16_val = 0;
    t_uint16.SetCurValue(std::any(uint16_val));
    EXPECT_FALSE(t_uint16.Success((char*)&uint16_val));
    EXPECT_TRUE(t_uint16.Failed((char*)&uint16_val));
    uint16_val = 60000;
    EXPECT_TRUE(t_uint16.Success((char*)&uint16_val));
    EXPECT_FALSE(t_uint16.Failed((char*)&uint16_val));
    // test BOOL type
    CBaseType<BOOL> t_bool(CBaseDef::type_bool);
    EXPECT_EQ(t_bool.GetBaseDef(), CBaseDef::type_bool);
    EXPECT_EQ(t_bool.GetBaseSize(), sizeof(BOOL));
    EXPECT_EQ(t_bool.GetName(), "BOOL");
    EXPECT_EQ(t_bool.GetObSize(), sizeof(BOOL));
    EXPECT_EQ(t_bool.GetObType(), CObObject::ob_basetype);
    EXPECT_EQ(t_bool.GetOp(), CObObject::op_n_equal);
    EXPECT_FALSE(t_bool.IsValidValue(nullptr));
    EXPECT_TRUE(t_bool.IsValidValue((char*)&test_bool_val));
    anyvalue = t_bool.GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(BOOL));
    EXPECT_EQ(std::any_cast<BOOL>(anyvalue), 0);
    EXPECT_TRUE(t_bool.SetCurValue(std::any(test_bool_val)));
    anyvalue = t_bool.GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(BOOL));
    EXPECT_TRUE(std::any_cast<BOOL>(anyvalue));
    BOOL bool_val = 5;
    anyvalue = t_bool.GetValue((char*)&bool_val);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(BOOL));
    EXPECT_EQ(std::any_cast<BOOL>(anyvalue), bool_val);
    EXPECT_TRUE(t_bool.SetValue((char*)&test_bool_val, std::any(bool_val)));
    EXPECT_EQ(test_bool_val, bool_val);
    EXPECT_FALSE(t_bool.SetValue((char*)&test_bool_val, std::any(test_byte_val)));
    bool_val = FALSE;
    t_bool.SetCurValue(std::any(bool_val));
    EXPECT_FALSE(t_bool.Success((char*)&bool_val));
    EXPECT_TRUE(t_bool.Failed((char*)&bool_val));
    bool_val = 10;
    EXPECT_TRUE(t_bool.Success((char*)&bool_val));
    EXPECT_FALSE(t_bool.Failed((char*)&bool_val));
    // test long type
    CBaseType<LONG> t_long(CBaseDef::type_long);
    EXPECT_EQ(t_long.GetBaseDef(), CBaseDef::type_long);
    EXPECT_EQ(t_long.GetBaseSize(), sizeof(LONG));
    EXPECT_EQ(t_long.GetName(), "LONG");
    EXPECT_EQ(t_long.GetObSize(), sizeof(LONG));
    EXPECT_EQ(t_long.GetObType(), CObObject::ob_basetype);
    EXPECT_EQ(t_long.GetOp(), CObObject::op_n_equal);
    EXPECT_FALSE(t_long.IsValidValue(nullptr));
    EXPECT_TRUE(t_long.IsValidValue((char*)&test_long_val));
    anyvalue = t_long.GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(LONG));
    EXPECT_EQ(std::any_cast<LONG>(anyvalue), 0);
    EXPECT_TRUE(t_long.SetCurValue(std::any(test_long_val)));
    anyvalue = t_long.GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(LONG));
    EXPECT_EQ(std::any_cast<LONG>(anyvalue), test_long_val);
    LONG long_val = (LONG)7943803;
    anyvalue = t_long.GetValue((char*)&long_val);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(LONG));
    EXPECT_EQ(std::any_cast<LONG>(anyvalue), long_val);
    EXPECT_TRUE(t_long.SetValue((char*)&test_long_val, std::any(long_val)));
    EXPECT_EQ(test_long_val, long_val);
    EXPECT_FALSE(t_long.SetValue((char*)&test_long_val, std::any(test_wchar_val)));
    long_val = 0;
    t_long.SetCurValue(std::any(long_val));
    EXPECT_FALSE(t_long.Success((char*)&long_val));
    EXPECT_TRUE(t_long.Failed((char*)&long_val));
    long_val = -1;
    EXPECT_TRUE(t_long.Success((char*)&long_val));
    EXPECT_FALSE(t_long.Failed((char*)&long_val));
    // test ulong_ptr type
    CBaseType<ULONG_PTR> t_ulong_ptr(CBaseDef::type_ulong_ptr);
    EXPECT_EQ(t_ulong_ptr.GetBaseDef(), CBaseDef::type_ulong_ptr);
    EXPECT_EQ(t_ulong_ptr.GetBaseSize(), sizeof(ULONG_PTR));
    EXPECT_EQ(t_ulong_ptr.GetName(), "ULONG_PTR");
    EXPECT_EQ(t_ulong_ptr.GetObSize(), sizeof(ULONG_PTR));
    EXPECT_EQ(t_ulong_ptr.GetObType(), CObObject::ob_basetype);
    EXPECT_EQ(t_ulong_ptr.GetOp(), CObObject::op_n_equal);
    EXPECT_FALSE(t_ulong_ptr.IsValidValue(nullptr));
    EXPECT_TRUE(t_ulong_ptr.IsValidValue((char*)&test_ulong_ptr_val));
    anyvalue = t_ulong_ptr.GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(ULONG_PTR));
    EXPECT_EQ(std::any_cast<ULONG_PTR>(anyvalue), 0);
    EXPECT_TRUE(t_ulong_ptr.SetCurValue(std::any(test_ulong_ptr_val)));
    anyvalue = t_ulong_ptr.GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(ULONG_PTR));
    EXPECT_EQ(std::any_cast<ULONG_PTR>(anyvalue), test_ulong_ptr_val);
    ULONG_PTR ulong_ptr_val = (ULONG_PTR)7943803;
    anyvalue = t_ulong_ptr.GetValue((char*)&ulong_ptr_val);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(ULONG_PTR));
    EXPECT_EQ(std::any_cast<ULONG_PTR>(anyvalue), ulong_ptr_val);
    EXPECT_TRUE(t_ulong_ptr.SetValue((char*)&test_ulong_ptr_val, std::any(ulong_ptr_val)));
    EXPECT_EQ(test_ulong_ptr_val, ulong_ptr_val);
    EXPECT_FALSE(t_ulong_ptr.SetValue((char*)&test_ulong_ptr_val, std::any(test_long_val)));
    EXPECT_TRUE(t_ulong_ptr.SetValue((char*)&test_ulong_ptr_val, std::any((ULONG_PTR)test_long_ptr_val)));
    ulong_ptr_val = 0;
    t_ulong_ptr.SetCurValue(std::any(ulong_ptr_val));
    EXPECT_FALSE(t_ulong_ptr.Success((char*)&ulong_ptr_val));
    EXPECT_TRUE(t_ulong_ptr.Failed((char*)&ulong_ptr_val));
    ulong_ptr_val = -1;
    EXPECT_TRUE(t_ulong_ptr.Success((char*)&ulong_ptr_val));
    EXPECT_FALSE(t_ulong_ptr.Failed((char*)&ulong_ptr_val));
    // test float type
    CBaseType<FLOAT> t_float_ptr(CBaseDef::type_float);
    EXPECT_EQ(t_float_ptr.GetBaseDef(), CBaseDef::type_float);
    EXPECT_EQ(t_float_ptr.GetBaseSize(), sizeof(FLOAT));
    EXPECT_EQ(t_float_ptr.GetName(), "FLOAT");
    EXPECT_EQ(t_float_ptr.GetObSize(), sizeof(FLOAT));
    EXPECT_EQ(t_float_ptr.GetObType(), CObObject::ob_basetype);
    EXPECT_EQ(t_float_ptr.GetOp(), CObObject::op_n_equal);
    EXPECT_FALSE(t_float_ptr.IsValidValue(nullptr));
    EXPECT_TRUE(t_float_ptr.IsValidValue((char*)&test_float_val));
    anyvalue = t_float_ptr.GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(FLOAT));
    EXPECT_FLOAT_EQ(std::any_cast<FLOAT>(anyvalue), 0);
    EXPECT_TRUE(t_float_ptr.SetCurValue(std::any(test_float_val)));
    anyvalue = t_float_ptr.GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(FLOAT));
    EXPECT_FLOAT_EQ(std::any_cast<FLOAT>(anyvalue), test_float_val);
    FLOAT float_val = (FLOAT)14.39278;
    anyvalue = t_float_ptr.GetValue((char*)&float_val);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(FLOAT));
    EXPECT_FLOAT_EQ(std::any_cast<FLOAT>(anyvalue), float_val);
    EXPECT_TRUE(t_float_ptr.SetValue((char*)&test_float_val, std::any(float_val)));
    EXPECT_FLOAT_EQ(test_float_val, float_val);
    EXPECT_FALSE(t_float_ptr.SetValue((char*)&test_float_val, std::any(test_bool_val)));
    EXPECT_TRUE(t_float_ptr.SetValue((char*)&test_float_val, std::any((FLOAT)test_bool_val)));
    float_val = 0;
    t_float_ptr.SetCurValue(std::any(float_val));
    EXPECT_FALSE(t_float_ptr.Success((char*)&float_val));
    EXPECT_TRUE(t_float_ptr.Failed((char*)&float_val));
    float_val = (FLOAT)3.1415926;
    EXPECT_TRUE(t_float_ptr.Success((char*)&float_val));
    EXPECT_FALSE(t_float_ptr.Failed((char*)&float_val));
    // test double type
    CBaseType<DOUBLE> t_double_ptr(CBaseDef::type_double);
    EXPECT_EQ(t_double_ptr.GetBaseDef(), CBaseDef::type_double);
    EXPECT_EQ(t_double_ptr.GetBaseSize(), sizeof(DOUBLE));
    EXPECT_EQ(t_double_ptr.GetName(), "DOUBLE");
    EXPECT_EQ(t_double_ptr.GetObSize(), sizeof(DOUBLE));
    EXPECT_EQ(t_double_ptr.GetObType(), CObObject::ob_basetype);
    EXPECT_EQ(t_double_ptr.GetOp(), CObObject::op_n_equal);
    EXPECT_FALSE(t_double_ptr.IsValidValue(nullptr));
    EXPECT_TRUE(t_double_ptr.IsValidValue((char*)&test_double_val));
    anyvalue = t_double_ptr.GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(DOUBLE));
    EXPECT_DOUBLE_EQ(std::any_cast<DOUBLE>(anyvalue), 0);
    EXPECT_TRUE(t_double_ptr.SetCurValue(std::any(test_double_val)));
    anyvalue = t_double_ptr.GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(DOUBLE));
    EXPECT_DOUBLE_EQ(std::any_cast<DOUBLE>(anyvalue), test_double_val);
    DOUBLE double_val = 615.839238478;
    anyvalue = t_double_ptr.GetValue((char*)&double_val);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(DOUBLE));
    EXPECT_DOUBLE_EQ(std::any_cast<DOUBLE>(anyvalue), double_val);
    EXPECT_TRUE(t_double_ptr.SetValue((char*)&test_double_val, std::any(double_val)));
    EXPECT_DOUBLE_EQ(test_double_val, double_val);
    EXPECT_FALSE(t_double_ptr.SetValue((char*)&test_double_val, std::any(test_bool_val)));
    EXPECT_TRUE(t_double_ptr.SetValue((char*)&test_double_val, std::any((DOUBLE)test_bool_val)));
    double_val = 0;
    t_double_ptr.SetCurValue(std::any(double_val));
    EXPECT_FALSE(t_double_ptr.Success((char*)&double_val));
    EXPECT_TRUE(t_double_ptr.Failed((char*)&double_val));
    double_val = 615.839238478;
    EXPECT_TRUE(t_double_ptr.Success((char*)&double_val));
    EXPECT_FALSE(t_double_ptr.Failed((char*)&double_val));
    // test qword type
    CBaseType<ULONGLONG> t_qword_ptr(CBaseDef::type_qword);
    EXPECT_EQ(t_qword_ptr.GetBaseDef(), CBaseDef::type_qword);
    EXPECT_EQ(t_qword_ptr.GetBaseSize(), sizeof(ULONGLONG));
    EXPECT_EQ(t_qword_ptr.GetName(), "QWORD");
    EXPECT_EQ(t_qword_ptr.GetObSize(), sizeof(ULONGLONG));
    EXPECT_EQ(t_qword_ptr.GetObType(), CObObject::ob_basetype);
    EXPECT_EQ(t_qword_ptr.GetOp(), CObObject::op_n_equal);
    EXPECT_FALSE(t_qword_ptr.IsValidValue(nullptr));
    EXPECT_TRUE(t_qword_ptr.IsValidValue((char*)&test_qword_val));
    anyvalue = t_qword_ptr.GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(ULONGLONG));
    EXPECT_EQ(std::any_cast<ULONGLONG>(anyvalue), 0);
    EXPECT_TRUE(t_qword_ptr.SetCurValue(std::any(test_qword_val)));
    anyvalue = t_qword_ptr.GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(ULONGLONG));
    EXPECT_EQ(std::any_cast<ULONGLONG>(anyvalue), test_qword_val);
    ULONGLONG qword_val = 5839023948320;
    anyvalue = t_qword_ptr.GetValue((char*)&qword_val);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(ULONGLONG));
    EXPECT_EQ(std::any_cast<ULONGLONG>(anyvalue), qword_val);
    EXPECT_TRUE(t_qword_ptr.SetValue((char*)&test_qword_val, std::any(qword_val)));
    EXPECT_EQ(test_qword_val, qword_val);
    EXPECT_FALSE(t_qword_ptr.SetValue((char*)&test_qword_val, std::any(test_bool_val)));
    EXPECT_TRUE(t_qword_ptr.SetValue((char*)&test_qword_val, std::any((ULONGLONG)test_bool_val)));
    qword_val = 0;
    t_qword_ptr.SetCurValue(std::any(qword_val));
    EXPECT_FALSE(t_qword_ptr.Success((char*)&qword_val));
    EXPECT_TRUE(t_qword_ptr.Failed((char*)&qword_val));
    qword_val = 892938417293;
    EXPECT_TRUE(t_qword_ptr.Success((char*)&qword_val));
    EXPECT_FALSE(t_qword_ptr.Failed((char*)&qword_val));
    // test hmodule type
    CBaseType<HMODULE> t_hmodule(CBaseDef::type_hmodule, nullptr, CObObject::op_n_equal);
    EXPECT_EQ(t_hmodule.GetBaseDef(), CBaseDef::type_hmodule);
    EXPECT_EQ(t_hmodule.GetBaseSize(), sizeof(HMODULE));
    EXPECT_EQ(t_hmodule.GetName(), "HMODULE");
    EXPECT_EQ(t_hmodule.GetObSize(), sizeof(HMODULE));
    EXPECT_EQ(t_hmodule.GetObType(), CObObject::ob_basetype);
    EXPECT_EQ(t_hmodule.GetOp(), CObObject::op_n_equal);
    EXPECT_FALSE(t_hmodule.IsValidValue(nullptr));
    EXPECT_TRUE(t_hmodule.IsValidValue((char*)&test_hmodule_val));
    anyvalue = t_hmodule.GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(HMODULE));
    EXPECT_EQ(std::any_cast<HMODULE>(anyvalue), nullptr);
    EXPECT_TRUE(t_hmodule.SetCurValue(std::any(test_hmodule_val)));
    anyvalue = t_hmodule.GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(HMODULE));
    EXPECT_EQ(std::any_cast<HMODULE>(anyvalue), test_hmodule_val);
    HMODULE hmodule_val = (HMODULE)-1;
    anyvalue = t_hmodule.GetValue((char*)&hmodule_val);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(HMODULE));
    EXPECT_EQ(std::any_cast<HMODULE>(anyvalue), hmodule_val);
    EXPECT_TRUE(t_hmodule.SetValue((char*)&test_hmodule_val, std::any(hmodule_val)));
    EXPECT_EQ(test_hmodule_val, hmodule_val);
    EXPECT_FALSE(t_hmodule.SetValue((char*)&test_hmodule_val, std::any(test_bool_val)));
    EXPECT_TRUE(t_hmodule.SetValue((char*)&test_hmodule_val, std::any((HMODULE)test_bool_val)));
    hmodule_val = 0;
    t_hmodule.SetCurValue(std::any(hmodule_val));
    EXPECT_FALSE(t_hmodule.Success((char*)&hmodule_val));
    EXPECT_TRUE(t_hmodule.Failed((char*)&hmodule_val));
    hmodule_val = (HMODULE)1;
    EXPECT_TRUE(t_hmodule.Success((char*)&hmodule_val));
    EXPECT_FALSE(t_hmodule.Failed((char*)&hmodule_val));
    // test hresult type
    CBaseType<HRESULT> t_hresult(CBaseDef::type_hresult, S_OK, CObObject::op_equal);
    EXPECT_EQ(t_hresult.GetBaseDef(), CBaseDef::type_hresult);
    EXPECT_EQ(t_hresult.GetBaseSize(), sizeof(HRESULT));
    EXPECT_EQ(t_hresult.GetName(), "HRESULT");
    EXPECT_EQ(t_hresult.GetObSize(), sizeof(HRESULT));
    EXPECT_EQ(t_hresult.GetObType(), CObObject::ob_basetype);
    EXPECT_EQ(t_hresult.GetOp(), CObObject::op_equal);
    EXPECT_FALSE(t_hresult.IsValidValue(nullptr));
    EXPECT_TRUE(t_hresult.IsValidValue((char*)&test_hresult_val));
    anyvalue = t_hresult.GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(HRESULT));
    EXPECT_EQ(std::any_cast<HRESULT>(anyvalue), S_OK);
    EXPECT_TRUE(t_hresult.SetCurValue(std::any(test_hresult_val)));
    anyvalue = t_hresult.GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(HRESULT));
    EXPECT_EQ(std::any_cast<HRESULT>(anyvalue), test_hresult_val);
    HRESULT hresult_val = S_OK;
    anyvalue = t_hresult.GetValue((char*)&hresult_val);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(HRESULT));
    EXPECT_EQ(std::any_cast<HRESULT>(anyvalue), hresult_val);
    EXPECT_TRUE(t_hresult.SetValue((char*)&test_hresult_val, std::any(hresult_val)));
    EXPECT_EQ(test_hresult_val, hresult_val);
    EXPECT_FALSE(t_hresult.SetValue((char*)&test_hresult_val, std::any(test_bool_val)));
    EXPECT_TRUE(t_hresult.SetValue((char*)&test_hresult_val, std::any((HRESULT)test_bool_val)));
    hresult_val = S_OK;
    t_hresult.SetCurValue(std::any(hresult_val));
    EXPECT_TRUE(t_hresult.Success((char*)&hresult_val));
    EXPECT_FALSE(t_hresult.Failed((char*)&hresult_val));
    hresult_val = (HRESULT)S_FALSE;
    EXPECT_FALSE(t_hresult.Success((char*)&hresult_val));
    EXPECT_TRUE(t_hresult.Failed((char*)&hresult_val));
    hresult_val = (HRESULT)32767;
    EXPECT_FALSE(t_hresult.Success((char*)&hresult_val));
    EXPECT_TRUE(t_hresult.Failed((char*)&hresult_val));
    // test ntstatus type
    CBaseType<NTSTATUS> t_ntstatus(CBaseDef::type_ntstatus, 0, CObObject::op_greater_e);
    EXPECT_EQ(t_ntstatus.GetBaseDef(), CBaseDef::type_ntstatus);
    EXPECT_EQ(t_ntstatus.GetBaseSize(), sizeof(NTSTATUS));
    EXPECT_EQ(t_ntstatus.GetName(), "NTSTATUS");
    EXPECT_EQ(t_ntstatus.GetObSize(), sizeof(NTSTATUS));
    EXPECT_EQ(t_ntstatus.GetObType(), CObObject::ob_basetype);
    EXPECT_EQ(t_ntstatus.GetOp(), CObObject::op_greater_e);
    EXPECT_FALSE(t_ntstatus.IsValidValue(nullptr));
    EXPECT_TRUE(t_ntstatus.IsValidValue((char*)&test_ntstatus_val));
    anyvalue = t_ntstatus.GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(NTSTATUS));
    EXPECT_EQ(std::any_cast<NTSTATUS>(anyvalue), 0);
    EXPECT_TRUE(t_ntstatus.SetCurValue(std::any(test_ntstatus_val)));
    anyvalue = t_ntstatus.GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(NTSTATUS));
    EXPECT_EQ(std::any_cast<NTSTATUS>(anyvalue), test_ntstatus_val);
    NTSTATUS ntstatus_val = 0x80000001;
    anyvalue = t_ntstatus.GetValue((char*)&ntstatus_val);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(NTSTATUS));
    EXPECT_EQ(std::any_cast<NTSTATUS>(anyvalue), ntstatus_val);
    EXPECT_TRUE(t_ntstatus.SetValue((char*)&test_ntstatus_val, std::any(ntstatus_val)));
    EXPECT_EQ(test_ntstatus_val, ntstatus_val);
    EXPECT_FALSE(t_ntstatus.SetValue((char*)&test_ntstatus_val, std::any(test_bool_val)));
    EXPECT_TRUE(t_ntstatus.SetValue((char*)&test_ntstatus_val, std::any((NTSTATUS)test_bool_val)));
    ntstatus_val = 0;
    t_ntstatus.SetCurValue(std::any(ntstatus_val));
    EXPECT_TRUE(t_ntstatus.Success((char*)&ntstatus_val));
    EXPECT_FALSE(t_ntstatus.Failed((char*)&ntstatus_val));
    ntstatus_val = (NTSTATUS)0xC0000005;
    EXPECT_FALSE(t_ntstatus.Success((char*)&ntstatus_val));
    EXPECT_TRUE(t_ntstatus.Failed((char*)&ntstatus_val));
    ntstatus_val = (NTSTATUS)0x927;
    EXPECT_TRUE(t_ntstatus.Success((char*)&ntstatus_val));
    EXPECT_FALSE(t_ntstatus.Failed((char*)&ntstatus_val));
    // test wstring type
    CBaseType<std::wstring> t_wstring(CBaseDef::type_wstring, {}, CObObject::op_n_equal);
    EXPECT_EQ(t_wstring.GetBaseDef(), CBaseDef::type_wstring);
    EXPECT_EQ(t_wstring.GetBaseSize(), sizeof(std::wstring));
    EXPECT_EQ(t_wstring.GetName(), "std::wstring");
    EXPECT_EQ(t_wstring.GetObSize(), sizeof(std::wstring));
    EXPECT_EQ(t_wstring.GetObType(), CObObject::ob_basetype);
    EXPECT_EQ(t_wstring.GetOp(), CObObject::op_n_equal);
    EXPECT_FALSE(t_wstring.IsValidValue(nullptr));
    EXPECT_TRUE(t_wstring.IsValidValue((char*)&test_wstring_val));
    anyvalue = t_wstring.GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(std::wstring));
    EXPECT_EQ(std::any_cast<std::wstring>(anyvalue), L"\0");
    EXPECT_TRUE(t_wstring.SetCurValue(std::any(test_wstring_val)));
    anyvalue = t_wstring.GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(std::wstring));
    EXPECT_EQ(std::any_cast<std::wstring>(anyvalue), test_wstring_val);
    std::wstring wstring_val = {L"172.19.127.201"};
    anyvalue = t_wstring.GetValue((char*)&wstring_val);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(std::wstring));
    EXPECT_EQ(std::any_cast<std::wstring>(anyvalue), wstring_val);
    EXPECT_TRUE(t_wstring.SetValue((char*)&test_wstring_val, std::any(wstring_val)));
    EXPECT_EQ(test_wstring_val, wstring_val);
    EXPECT_FALSE(t_wstring.SetValue((char*)&test_wstring_val, std::any(test_bool_val)));
    wstring_val = {};
    t_wstring.SetCurValue(std::any(wstring_val));
    EXPECT_FALSE(t_wstring.Success((char*)&wstring_val));
    EXPECT_TRUE(t_wstring.Failed((char*)&wstring_val));
    wstring_val = {L"https::\\www.google.com"};
    EXPECT_TRUE(t_wstring.Success((char*)&wstring_val));
    EXPECT_FALSE(t_wstring.Failed((char*)&wstring_val));
    // test guid type
    CBaseType<GUID> t_guid(CBaseDef::type_guid, {}, CObObject::op_n_equal);
    EXPECT_EQ(t_guid.GetBaseDef(), CBaseDef::type_guid);
    EXPECT_EQ(t_guid.GetBaseSize(), sizeof(GUID));
    EXPECT_EQ(t_guid.GetName(), "GUID");
    EXPECT_EQ(t_guid.GetObSize(), sizeof(GUID));
    EXPECT_EQ(t_guid.GetObType(), CObObject::ob_basetype);
    EXPECT_EQ(t_guid.GetOp(), CObObject::op_n_equal);
    EXPECT_FALSE(t_guid.IsValidValue(nullptr));
    EXPECT_TRUE(t_guid.IsValidValue((char*)&test_guid_val));
    anyvalue = t_guid.GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(GUID));
    EXPECT_EQ(std::any_cast<GUID>(anyvalue), GUID{});
    EXPECT_TRUE(t_guid.SetCurValue(std::any(test_guid_val)));
    anyvalue = t_guid.GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(GUID));
    EXPECT_EQ(std::any_cast<GUID>(anyvalue), test_guid_val);
    GUID guid_val = {0x4590f811, 0x1d3a, 0x11d0, 0x1f, 0x89, 0x00, 0xaa, 0x00, 0x4b, 0x2e, 0x24};
    anyvalue = t_guid.GetValue((char*)&guid_val);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(GUID));
    EXPECT_EQ(std::any_cast<GUID>(anyvalue), guid_val);
    EXPECT_TRUE(t_guid.SetValue((char*)&test_guid_val, std::any(guid_val)));
    EXPECT_EQ(test_guid_val, guid_val);
    EXPECT_FALSE(t_guid.SetValue((char*)&test_guid_val, std::any(test_bool_val)));
    guid_val = {};
    t_guid.SetCurValue(std::any(guid_val));
    EXPECT_FALSE(t_guid.Success((char*)&guid_val));
    EXPECT_TRUE(t_guid.Failed((char*)&guid_val));
    GUID guid_val_2 = { 0x4590f811, 0x1d3a, 0x11d0, 0x1f, 0x89, 0x11, 0xcc, 0x24, 0x73, 0x64, 0xbb };
    EXPECT_TRUE(t_guid.Success((char*)&guid_val_2));
    EXPECT_FALSE(t_guid.Failed((char*)&guid_val_2));
}

// test CMetadataTypeObject
TEST_F(HookMetadataTest, CMetadataTypeObject_Test)
{
    std::any anyvalue;
    // test void type
    std::shared_ptr<CMetadataTypeObject> m_void_ptr = make_metadata_s_ptr<ULONG>(CBaseDef::type_void);
    ASSERT_TRUE(m_void_ptr != nullptr);
    EXPECT_EQ(std::static_pointer_cast<CBaseType<ULONG>>(m_void_ptr->GetMetadataDef())->GetBaseDef(), CBaseDef::type_void);
    EXPECT_EQ(m_void_ptr->GetName(), "VOID");
    EXPECT_EQ(m_void_ptr->GetObSize(), 0);
    EXPECT_EQ(m_void_ptr->GetObType(), CObObject::ob_basetype);
    EXPECT_EQ(m_void_ptr->GetOp(), CObObject::op_n_equal);
    EXPECT_TRUE(m_void_ptr->IsValidValue(nullptr));
    EXPECT_TRUE(m_void_ptr->IsValidValue((char*)&test_char_val));
    anyvalue = m_void_ptr->GetCurValue();
    EXPECT_FALSE(anyvalue.has_value());
    EXPECT_FALSE(m_void_ptr->SetCurValue(std::any(test_char_val)));
    anyvalue = m_void_ptr->GetValue((char*)&test_char_val);
    EXPECT_FALSE(anyvalue.has_value());
    EXPECT_FALSE(m_void_ptr->SetValue((char*)&test_char_val, std::any(test_char_val)));
    char char_val = 'A';
    EXPECT_TRUE(m_void_ptr->Success((char*)&char_val));
    EXPECT_FALSE(m_void_ptr->Failed((char*)&char_val));
    char_val = '\0';
    EXPECT_TRUE(m_void_ptr->Success((char*)&char_val));
    EXPECT_FALSE(m_void_ptr->Failed((char*)&char_val));
    //test BYTE type
    std::shared_ptr<CMetadataTypeObject> m_byte_ptr = make_metadata_s_ptr<BYTE>(CBaseDef::type_byte);
    ASSERT_TRUE(m_byte_ptr != nullptr);
    EXPECT_EQ(std::static_pointer_cast<CBaseType<ULONG>>(m_byte_ptr->GetMetadataDef())->GetBaseDef(), CBaseDef::type_byte);
    EXPECT_EQ(m_byte_ptr->GetName(), "BYTE");
    EXPECT_EQ(m_byte_ptr->GetObSize(), sizeof(BYTE));
    EXPECT_EQ(m_byte_ptr->GetObType(), CObObject::ob_basetype);
    EXPECT_EQ(m_byte_ptr->GetOp(), CObObject::op_n_equal);
    EXPECT_FALSE(m_byte_ptr->IsValidValue(nullptr));
    EXPECT_TRUE(m_byte_ptr->IsValidValue((char*)&test_byte_val));
    anyvalue = m_byte_ptr->GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(BYTE));
    EXPECT_EQ(std::any_cast<BYTE>(anyvalue), 0);
    EXPECT_TRUE(m_byte_ptr->SetCurValue(std::any(test_byte_val)));
    anyvalue = m_byte_ptr->GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(BYTE));
    EXPECT_EQ(std::any_cast<BYTE>(anyvalue), test_byte_val);
    BYTE byte_val = 128;
    anyvalue = m_byte_ptr->GetValue((char*)&byte_val);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(BYTE));
    EXPECT_EQ(std::any_cast<BYTE>(anyvalue), byte_val);
    EXPECT_TRUE(m_byte_ptr->SetValue((char*)&test_byte_val, std::any(byte_val)));
    EXPECT_EQ(test_byte_val, byte_val);
    EXPECT_FALSE(m_byte_ptr->SetValue((char*)&test_byte_val, std::any(test_uint16_val)));
    byte_val = 0;
    EXPECT_TRUE(m_byte_ptr->Success((char*)&byte_val));
    EXPECT_FALSE(m_byte_ptr->Failed((char*)&byte_val));
    byte_val = 255;
    EXPECT_FALSE(m_byte_ptr->Success((char*)&byte_val));
    EXPECT_TRUE(m_byte_ptr->Failed((char*)&byte_val));
    // test wchar type
    std::shared_ptr<CMetadataTypeObject> m_wchar_ptr = make_metadata_s_ptr<WCHAR>(CBaseDef::type_wchar);
    ASSERT_TRUE(m_wchar_ptr != nullptr);
    EXPECT_EQ(std::static_pointer_cast<CBaseType<ULONG>>(m_wchar_ptr->GetMetadataDef())->GetBaseDef(), CBaseDef::type_wchar);
    EXPECT_EQ(m_wchar_ptr->GetName(), "WCHAR");
    EXPECT_EQ(m_wchar_ptr->GetObSize(), sizeof(WCHAR));
    EXPECT_EQ(m_wchar_ptr->GetObType(), CObObject::ob_basetype);
    EXPECT_EQ(m_wchar_ptr->GetOp(), CObObject::op_n_equal);
    EXPECT_FALSE(m_wchar_ptr->IsValidValue(nullptr));
    EXPECT_TRUE(m_wchar_ptr->IsValidValue((char*)&test_wchar_val));
    anyvalue = m_wchar_ptr->GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(WCHAR));
    EXPECT_EQ(std::any_cast<WCHAR>(anyvalue), L'\0');
    EXPECT_TRUE(m_wchar_ptr->SetCurValue(std::any(test_wchar_val)));
    anyvalue = m_wchar_ptr->GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(WCHAR));
    EXPECT_EQ(std::any_cast<WCHAR>(anyvalue), test_wchar_val);
    WCHAR wchar_val = (WCHAR)-200;
    anyvalue = m_wchar_ptr->GetValue((char*)&wchar_val);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(WCHAR));
    EXPECT_EQ(std::any_cast<WCHAR>(anyvalue), wchar_val);
    EXPECT_TRUE(m_wchar_ptr->SetValue((char*)&test_wchar_val, std::any(wchar_val)));
    EXPECT_EQ(test_wchar_val, wchar_val);
    EXPECT_FALSE(m_wchar_ptr->SetValue((char*)&test_wchar_val, std::any(test_char_val)));
    wchar_val = L'\0';
    m_wchar_ptr->SetCurValue(std::any(wchar_val));
    EXPECT_FALSE(m_wchar_ptr->Success((char*)&wchar_val));
    EXPECT_TRUE(m_wchar_ptr->Failed((char*)&wchar_val));
    wchar_val = L'Z';
    EXPECT_TRUE(m_wchar_ptr->Success((char*)&wchar_val));
    EXPECT_FALSE(m_wchar_ptr->Failed((char*)&wchar_val));
    // test uint16 type
    std::shared_ptr<CMetadataTypeObject> m_uint16_ptr = make_metadata_s_ptr<UINT16>(CBaseDef::type_uint16);
    ASSERT_TRUE(m_uint16_ptr != nullptr);
    EXPECT_EQ(std::static_pointer_cast<CBaseType<ULONG>>(m_uint16_ptr->GetMetadataDef())->GetBaseDef(), CBaseDef::type_uint16);
    EXPECT_EQ(m_uint16_ptr->GetName(), "UINT16");
    EXPECT_EQ(m_uint16_ptr->GetObSize(), sizeof(UINT16));
    EXPECT_EQ(m_uint16_ptr->GetObType(), CObObject::ob_basetype);
    EXPECT_EQ(m_uint16_ptr->GetOp(), CObObject::op_n_equal);
    EXPECT_FALSE(m_uint16_ptr->IsValidValue(nullptr));
    EXPECT_TRUE(m_uint16_ptr->IsValidValue((char*)&test_uint16_val));
    anyvalue = m_uint16_ptr->GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(UINT16));
    EXPECT_EQ(std::any_cast<UINT16>(anyvalue), 0);
    EXPECT_TRUE(m_uint16_ptr->SetCurValue(std::any(test_uint16_val)));
    anyvalue = m_uint16_ptr->GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(UINT16));
    EXPECT_EQ(std::any_cast<UINT16>(anyvalue), test_uint16_val);
    UINT16 uint16_val = (UINT16)-100;
    anyvalue = m_uint16_ptr->GetValue((char*)&uint16_val);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(UINT16));
    EXPECT_EQ(std::any_cast<UINT16>(anyvalue), uint16_val);
    EXPECT_TRUE(m_uint16_ptr->SetValue((char*)&test_uint16_val, std::any(uint16_val)));
    EXPECT_EQ(test_uint16_val, uint16_val);
    EXPECT_FALSE(m_uint16_ptr->SetValue((char*)&test_uint16_val, std::any(test_bool_val)));
    uint16_val = 0;
    m_uint16_ptr->SetCurValue(std::any(uint16_val));
    EXPECT_FALSE(m_uint16_ptr->Success((char*)&uint16_val));
    EXPECT_TRUE(m_uint16_ptr->Failed((char*)&uint16_val));
    uint16_val = 60000;
    EXPECT_TRUE(m_uint16_ptr->Success((char*)&uint16_val));
    EXPECT_FALSE(m_uint16_ptr->Failed((char*)&uint16_val));
    // test BOOL type
    std::shared_ptr<CMetadataTypeObject> m_bool_ptr = make_metadata_s_ptr<BOOL>(CBaseDef::type_bool);
    ASSERT_TRUE(m_bool_ptr != nullptr);
    EXPECT_EQ(std::static_pointer_cast<CBaseType<ULONG>>(m_bool_ptr->GetMetadataDef())->GetBaseDef(), CBaseDef::type_bool);
    EXPECT_EQ(m_bool_ptr->GetName(), "BOOL");
    EXPECT_EQ(m_bool_ptr->GetObSize(), sizeof(BOOL));
    EXPECT_EQ(m_bool_ptr->GetObType(), CObObject::ob_basetype);
    EXPECT_EQ(m_bool_ptr->GetOp(), CObObject::op_n_equal);
    EXPECT_FALSE(m_bool_ptr->IsValidValue(nullptr));
    EXPECT_TRUE(m_bool_ptr->IsValidValue((char*)&test_bool_val));
    anyvalue = m_bool_ptr->GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(BOOL));
    EXPECT_EQ(std::any_cast<BOOL>(anyvalue), 0);
    EXPECT_TRUE(m_bool_ptr->SetCurValue(std::any(test_bool_val)));
    anyvalue = m_bool_ptr->GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(BOOL));
    EXPECT_TRUE(std::any_cast<BOOL>(anyvalue));
    BOOL bool_val = 5;
    anyvalue = m_bool_ptr->GetValue((char*)&bool_val);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(BOOL));
    EXPECT_EQ(std::any_cast<BOOL>(anyvalue), bool_val);
    EXPECT_TRUE(m_bool_ptr->SetValue((char*)&test_bool_val, std::any(bool_val)));
    EXPECT_EQ(test_bool_val, bool_val);
    EXPECT_FALSE(m_bool_ptr->SetValue((char*)&test_bool_val, std::any(test_byte_val)));
    bool_val = FALSE;
    m_bool_ptr->SetCurValue(std::any(bool_val));
    EXPECT_FALSE(m_bool_ptr->Success((char*)&bool_val));
    EXPECT_TRUE(m_bool_ptr->Failed((char*)&bool_val));
    bool_val = 10;
    EXPECT_TRUE(m_bool_ptr->Success((char*)&bool_val));
    EXPECT_FALSE(m_bool_ptr->Failed((char*)&bool_val));
    // test long type
    std::shared_ptr<CMetadataTypeObject> m_long_ptr = make_metadata_s_ptr<LONG>(CBaseDef::type_long);
    ASSERT_TRUE(m_long_ptr != nullptr);
    EXPECT_EQ(std::static_pointer_cast<CBaseType<ULONG>>(m_long_ptr->GetMetadataDef())->GetBaseDef(), CBaseDef::type_long);
    EXPECT_EQ(m_long_ptr->GetName(), "LONG");
    EXPECT_EQ(m_long_ptr->GetObSize(), sizeof(LONG));
    EXPECT_EQ(m_long_ptr->GetObType(), CObObject::ob_basetype);
    EXPECT_EQ(m_long_ptr->GetOp(), CObObject::op_n_equal);
    EXPECT_FALSE(m_long_ptr->IsValidValue(nullptr));
    EXPECT_TRUE(m_long_ptr->IsValidValue((char*)&test_long_val));
    anyvalue = m_long_ptr->GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(LONG));
    EXPECT_EQ(std::any_cast<LONG>(anyvalue), 0);
    EXPECT_TRUE(m_long_ptr->SetCurValue(std::any(test_long_val)));
    anyvalue = m_long_ptr->GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(LONG));
    EXPECT_EQ(std::any_cast<LONG>(anyvalue), test_long_val);
    LONG long_val = (LONG)7943803;
    anyvalue = m_long_ptr->GetValue((char*)&long_val);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(LONG));
    EXPECT_EQ(std::any_cast<LONG>(anyvalue), long_val);
    EXPECT_TRUE(m_long_ptr->SetValue((char*)&test_long_val, std::any(long_val)));
    EXPECT_EQ(test_long_val, long_val);
    EXPECT_FALSE(m_long_ptr->SetValue((char*)&test_long_val, std::any(test_wchar_val)));
    long_val = 0;
    m_long_ptr->SetCurValue(std::any(long_val));
    EXPECT_FALSE(m_long_ptr->Success((char*)&long_val));
    EXPECT_TRUE(m_long_ptr->Failed((char*)&long_val));
    long_val = -1;
    EXPECT_TRUE(m_long_ptr->Success((char*)&long_val));
    EXPECT_FALSE(m_long_ptr->Failed((char*)&long_val));
    // test ulong_ptr type
    std::shared_ptr<CMetadataTypeObject> m_ulong_ptr_ptr = make_metadata_s_ptr<ULONG_PTR>(CBaseDef::type_ulong_ptr);
    ASSERT_TRUE(m_ulong_ptr_ptr != nullptr);
    EXPECT_EQ(std::static_pointer_cast<CBaseType<ULONG>>(m_ulong_ptr_ptr->GetMetadataDef())->GetBaseDef(), CBaseDef::type_ulong_ptr);
    EXPECT_EQ(m_ulong_ptr_ptr->GetName(), "ULONG_PTR");
    EXPECT_EQ(m_ulong_ptr_ptr->GetObSize(), sizeof(ULONG_PTR));
    EXPECT_EQ(m_ulong_ptr_ptr->GetObType(), CObObject::ob_basetype);
    EXPECT_EQ(m_ulong_ptr_ptr->GetOp(), CObObject::op_n_equal);
    EXPECT_FALSE(m_ulong_ptr_ptr->IsValidValue(nullptr));
    EXPECT_TRUE(m_ulong_ptr_ptr->IsValidValue((char*)&test_ulong_ptr_val));
    anyvalue = m_ulong_ptr_ptr->GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(ULONG_PTR));
    EXPECT_EQ(std::any_cast<ULONG_PTR>(anyvalue), 0);
    EXPECT_TRUE(m_ulong_ptr_ptr->SetCurValue(std::any(test_ulong_ptr_val)));
    anyvalue = m_ulong_ptr_ptr->GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(ULONG_PTR));
    EXPECT_EQ(std::any_cast<ULONG_PTR>(anyvalue), test_ulong_ptr_val);
    ULONG_PTR ulong_ptr_val = (ULONG_PTR)7943803;
    anyvalue = m_ulong_ptr_ptr->GetValue((char*)&ulong_ptr_val);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(ULONG_PTR));
    EXPECT_EQ(std::any_cast<ULONG_PTR>(anyvalue), ulong_ptr_val);
    EXPECT_TRUE(m_ulong_ptr_ptr->SetValue((char*)&test_ulong_ptr_val, std::any(ulong_ptr_val)));
    EXPECT_EQ(test_ulong_ptr_val, ulong_ptr_val);
    EXPECT_FALSE(m_ulong_ptr_ptr->SetValue((char*)&test_ulong_ptr_val, std::any(test_long_val)));
    EXPECT_TRUE(m_ulong_ptr_ptr->SetValue((char*)&test_ulong_ptr_val, std::any((ULONG_PTR)test_long_ptr_val)));
    ulong_ptr_val = 0;
    m_ulong_ptr_ptr->SetCurValue(std::any(ulong_ptr_val));
    EXPECT_FALSE(m_ulong_ptr_ptr->Success((char*)&ulong_ptr_val));
    EXPECT_TRUE(m_ulong_ptr_ptr->Failed((char*)&ulong_ptr_val));
    ulong_ptr_val = -1;
    EXPECT_TRUE(m_ulong_ptr_ptr->Success((char*)&ulong_ptr_val));
    EXPECT_FALSE(m_ulong_ptr_ptr->Failed((char*)&ulong_ptr_val));
    // test float type
    std::shared_ptr<CMetadataTypeObject> m_float_ptr = make_metadata_s_ptr<FLOAT>(CBaseDef::type_float);
    ASSERT_TRUE(m_float_ptr != nullptr);
    EXPECT_EQ(std::static_pointer_cast<CBaseType<ULONG>>(m_float_ptr->GetMetadataDef())->GetBaseDef(), CBaseDef::type_float);
    EXPECT_EQ(m_float_ptr->GetName(), "FLOAT");
    EXPECT_EQ(m_float_ptr->GetObSize(), sizeof(FLOAT));
    EXPECT_EQ(m_float_ptr->GetObType(), CObObject::ob_basetype);
    EXPECT_EQ(m_float_ptr->GetOp(), CObObject::op_n_equal);
    EXPECT_FALSE(m_float_ptr->IsValidValue(nullptr));
    EXPECT_TRUE(m_float_ptr->IsValidValue((char*)&test_float_val));
    anyvalue = m_float_ptr->GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(FLOAT));
    EXPECT_FLOAT_EQ(std::any_cast<FLOAT>(anyvalue), 0);
    EXPECT_TRUE(m_float_ptr->SetCurValue(std::any(test_float_val)));
    anyvalue = m_float_ptr->GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(FLOAT));
    EXPECT_FLOAT_EQ(std::any_cast<FLOAT>(anyvalue), test_float_val);
    FLOAT float_val = (FLOAT)14.39278;
    anyvalue = m_float_ptr->GetValue((char*)&float_val);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(FLOAT));
    EXPECT_FLOAT_EQ(std::any_cast<FLOAT>(anyvalue), float_val);
    EXPECT_TRUE(m_float_ptr->SetValue((char*)&test_float_val, std::any(float_val)));
    EXPECT_FLOAT_EQ(test_float_val, float_val);
    EXPECT_FALSE(m_float_ptr->SetValue((char*)&test_float_val, std::any(test_bool_val)));
    EXPECT_TRUE(m_float_ptr->SetValue((char*)&test_float_val, std::any((FLOAT)test_bool_val)));
    float_val = 0;
    m_float_ptr->SetCurValue(std::any(float_val));
    EXPECT_FALSE(m_float_ptr->Success((char*)&float_val));
    EXPECT_TRUE(m_float_ptr->Failed((char*)&float_val));
    float_val = (FLOAT)3.1415926;
    EXPECT_TRUE(m_float_ptr->Success((char*)&float_val));
    EXPECT_FALSE(m_float_ptr->Failed((char*)&float_val));
    // test double type
    std::shared_ptr<CMetadataTypeObject> m_double_ptr = make_metadata_s_ptr<DOUBLE>(CBaseDef::type_double);
    ASSERT_TRUE(m_double_ptr != nullptr);
    EXPECT_EQ(std::static_pointer_cast<CBaseType<ULONG>>(m_double_ptr->GetMetadataDef())->GetBaseDef(), CBaseDef::type_double);
    EXPECT_EQ(m_double_ptr->GetName(), "DOUBLE");
    EXPECT_EQ(m_double_ptr->GetObSize(), sizeof(DOUBLE));
    EXPECT_EQ(m_double_ptr->GetObType(), CObObject::ob_basetype);
    EXPECT_EQ(m_double_ptr->GetOp(), CObObject::op_n_equal);
    EXPECT_FALSE(m_double_ptr->IsValidValue(nullptr));
    EXPECT_TRUE(m_double_ptr->IsValidValue((char*)&test_double_val));
    anyvalue = m_double_ptr->GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(DOUBLE));
    EXPECT_DOUBLE_EQ(std::any_cast<DOUBLE>(anyvalue), 0);
    EXPECT_TRUE(m_double_ptr->SetCurValue(std::any(test_double_val)));
    anyvalue = m_double_ptr->GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(DOUBLE));
    EXPECT_DOUBLE_EQ(std::any_cast<DOUBLE>(anyvalue), test_double_val);
    DOUBLE double_val = 615.839238478;
    anyvalue = m_double_ptr->GetValue((char*)&double_val);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(DOUBLE));
    EXPECT_DOUBLE_EQ(std::any_cast<DOUBLE>(anyvalue), double_val);
    EXPECT_TRUE(m_double_ptr->SetValue((char*)&test_double_val, std::any(double_val)));
    EXPECT_DOUBLE_EQ(test_double_val, double_val);
    EXPECT_FALSE(m_double_ptr->SetValue((char*)&test_double_val, std::any(test_bool_val)));
    EXPECT_TRUE(m_double_ptr->SetValue((char*)&test_double_val, std::any((DOUBLE)test_bool_val)));
    double_val = 0;
    m_double_ptr->SetCurValue(std::any(double_val));
    EXPECT_FALSE(m_double_ptr->Success((char*)&double_val));
    EXPECT_TRUE(m_double_ptr->Failed((char*)&double_val));
    double_val = 615.839238478;
    EXPECT_TRUE(m_double_ptr->Success((char*)&double_val));
    EXPECT_FALSE(m_double_ptr->Failed((char*)&double_val));
    // test qword type
    std::shared_ptr<CMetadataTypeObject> m_qword_ptr = make_metadata_s_ptr<ULONGLONG>(CBaseDef::type_qword);
    ASSERT_TRUE(m_qword_ptr != nullptr);
    EXPECT_EQ(std::static_pointer_cast<CBaseType<ULONG>>(m_qword_ptr->GetMetadataDef())->GetBaseDef(), CBaseDef::type_qword);
    EXPECT_EQ(m_qword_ptr->GetName(), "QWORD");
    EXPECT_EQ(m_qword_ptr->GetObSize(), sizeof(ULONGLONG));
    EXPECT_EQ(m_qword_ptr->GetObType(), CObObject::ob_basetype);
    EXPECT_EQ(m_qword_ptr->GetOp(), CObObject::op_n_equal);
    EXPECT_FALSE(m_qword_ptr->IsValidValue(nullptr));
    EXPECT_TRUE(m_qword_ptr->IsValidValue((char*)&test_qword_val));
    anyvalue = m_qword_ptr->GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(ULONGLONG));
    EXPECT_EQ(std::any_cast<ULONGLONG>(anyvalue), 0);
    EXPECT_TRUE(m_qword_ptr->SetCurValue(std::any(test_qword_val)));
    anyvalue = m_qword_ptr->GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(ULONGLONG));
    EXPECT_EQ(std::any_cast<ULONGLONG>(anyvalue), test_qword_val);
    ULONGLONG qword_val = 5839023948320;
    anyvalue = m_qword_ptr->GetValue((char*)&qword_val);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(ULONGLONG));
    EXPECT_EQ(std::any_cast<ULONGLONG>(anyvalue), qword_val);
    EXPECT_TRUE(m_qword_ptr->SetValue((char*)&test_qword_val, std::any(qword_val)));
    EXPECT_EQ(test_qword_val, qword_val);
    EXPECT_FALSE(m_qword_ptr->SetValue((char*)&test_qword_val, std::any(test_bool_val)));
    EXPECT_TRUE(m_qword_ptr->SetValue((char*)&test_qword_val, std::any((ULONGLONG)test_bool_val)));
    qword_val = 0;
    m_qword_ptr->SetCurValue(std::any(qword_val));
    EXPECT_FALSE(m_qword_ptr->Success((char*)&qword_val));
    EXPECT_TRUE(m_qword_ptr->Failed((char*)&qword_val));
    qword_val = 892938417293;
    EXPECT_TRUE(m_qword_ptr->Success((char*)&qword_val));
    EXPECT_FALSE(m_qword_ptr->Failed((char*)&qword_val));
    // test hmodule type
    std::shared_ptr<CMetadataTypeObject> m_hmodule_ptr = make_metadata_j_ptr<HMODULE>(CBaseDef::type_hmodule, nullptr, CObObject::op_n_equal);
    ASSERT_TRUE(m_hmodule_ptr != nullptr);
    EXPECT_EQ(std::static_pointer_cast<CBaseType<ULONG>>(m_hmodule_ptr->GetMetadataDef())->GetBaseDef(), CBaseDef::type_hmodule);
    EXPECT_EQ(m_hmodule_ptr->GetName(), "HMODULE");
    EXPECT_EQ(m_hmodule_ptr->GetObSize(), sizeof(HMODULE));
    EXPECT_EQ(m_hmodule_ptr->GetObType(), CObObject::ob_basetype);
    EXPECT_EQ(m_hmodule_ptr->GetOp(), CObObject::op_n_equal);
    EXPECT_FALSE(m_hmodule_ptr->IsValidValue(nullptr));
    EXPECT_TRUE(m_hmodule_ptr->IsValidValue((char*)&test_hmodule_val));
    anyvalue = m_hmodule_ptr->GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(HMODULE));
    EXPECT_EQ(std::any_cast<HMODULE>(anyvalue), nullptr);
    EXPECT_TRUE(m_hmodule_ptr->SetCurValue(std::any(test_hmodule_val)));
    anyvalue = m_hmodule_ptr->GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(HMODULE));
    EXPECT_EQ(std::any_cast<HMODULE>(anyvalue), test_hmodule_val);
    HMODULE hmodule_val = (HMODULE)-1;
    anyvalue = m_hmodule_ptr->GetValue((char*)&hmodule_val);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(HMODULE));
    EXPECT_EQ(std::any_cast<HMODULE>(anyvalue), hmodule_val);
    EXPECT_TRUE(m_hmodule_ptr->SetValue((char*)&test_hmodule_val, std::any(hmodule_val)));
    EXPECT_EQ(test_hmodule_val, hmodule_val);
    EXPECT_FALSE(m_hmodule_ptr->SetValue((char*)&test_hmodule_val, std::any(test_bool_val)));
    EXPECT_TRUE(m_hmodule_ptr->SetValue((char*)&test_hmodule_val, std::any((HMODULE)test_bool_val)));
    hmodule_val = 0;
    m_hmodule_ptr->SetCurValue(std::any(hmodule_val));
    EXPECT_FALSE(m_hmodule_ptr->Success((char*)&hmodule_val));
    EXPECT_TRUE(m_hmodule_ptr->Failed((char*)&hmodule_val));
    hmodule_val = (HMODULE)1;
    EXPECT_TRUE(m_hmodule_ptr->Success((char*)&hmodule_val));
    EXPECT_FALSE(m_hmodule_ptr->Failed((char*)&hmodule_val));
    // test hresult type
    std::shared_ptr<CMetadataTypeObject> m_hresult_ptr = make_metadata_j_ptr<HRESULT>(CBaseDef::type_hresult, S_OK, CObObject::op_equal);
    ASSERT_TRUE(m_hresult_ptr != nullptr);
    EXPECT_EQ(std::static_pointer_cast<CBaseType<ULONG>>(m_hresult_ptr->GetMetadataDef())->GetBaseDef(), CBaseDef::type_hresult);
    EXPECT_EQ(m_hresult_ptr->GetName(), "HRESULT");
    EXPECT_EQ(m_hresult_ptr->GetObSize(), sizeof(HRESULT));
    EXPECT_EQ(m_hresult_ptr->GetObType(), CObObject::ob_basetype);
    EXPECT_EQ(m_hresult_ptr->GetOp(), CObObject::op_equal);
    EXPECT_FALSE(m_hresult_ptr->IsValidValue(nullptr));
    EXPECT_TRUE(m_hresult_ptr->IsValidValue((char*)&test_hresult_val));
    anyvalue = m_hresult_ptr->GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(HRESULT));
    EXPECT_EQ(std::any_cast<HRESULT>(anyvalue), S_OK);
    EXPECT_TRUE(m_hresult_ptr->SetCurValue(std::any(test_hresult_val)));
    anyvalue = m_hresult_ptr->GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(HRESULT));
    EXPECT_EQ(std::any_cast<HRESULT>(anyvalue), test_hresult_val);
    HRESULT hresult_val = S_OK;
    anyvalue = m_hresult_ptr->GetValue((char*)&hresult_val);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(HRESULT));
    EXPECT_EQ(std::any_cast<HRESULT>(anyvalue), hresult_val);
    EXPECT_TRUE(m_hresult_ptr->SetValue((char*)&test_hresult_val, std::any(hresult_val)));
    EXPECT_EQ(test_hresult_val, hresult_val);
    EXPECT_FALSE(m_hresult_ptr->SetValue((char*)&test_hresult_val, std::any(test_bool_val)));
    EXPECT_TRUE(m_hresult_ptr->SetValue((char*)&test_hresult_val, std::any((HRESULT)test_bool_val)));
    hresult_val = S_OK;
    m_hresult_ptr->SetCurValue(std::any(hresult_val));
    EXPECT_TRUE(m_hresult_ptr->Success((char*)&hresult_val));
    EXPECT_FALSE(m_hresult_ptr->Failed((char*)&hresult_val));
    hresult_val = (HRESULT)S_FALSE;
    EXPECT_FALSE(m_hresult_ptr->Success((char*)&hresult_val));
    EXPECT_TRUE(m_hresult_ptr->Failed((char*)&hresult_val));
    hresult_val = (HRESULT)32767;
    EXPECT_FALSE(m_hresult_ptr->Success((char*)&hresult_val));
    EXPECT_TRUE(m_hresult_ptr->Failed((char*)&hresult_val));
    // test hresult type
    std::shared_ptr<CMetadataTypeObject> m_ntstatus_ptr = make_metadata_j_ptr<NTSTATUS>(CBaseDef::type_ntstatus, 0, CObObject::op_greater_e);
    ASSERT_TRUE(m_ntstatus_ptr != nullptr);
    EXPECT_EQ(std::static_pointer_cast<CBaseType<ULONG>>(m_ntstatus_ptr->GetMetadataDef())->GetBaseDef(), CBaseDef::type_ntstatus);
    EXPECT_EQ(m_ntstatus_ptr->GetName(), "NTSTATUS");
    EXPECT_EQ(m_ntstatus_ptr->GetObSize(), sizeof(NTSTATUS));
    EXPECT_EQ(m_ntstatus_ptr->GetObType(), CObObject::ob_basetype);
    EXPECT_EQ(m_ntstatus_ptr->GetOp(), CObObject::op_greater_e);
    EXPECT_FALSE(m_ntstatus_ptr->IsValidValue(nullptr));
    EXPECT_TRUE(m_ntstatus_ptr->IsValidValue((char*)&test_ntstatus_val));
    anyvalue = m_ntstatus_ptr->GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(NTSTATUS));
    EXPECT_EQ(std::any_cast<NTSTATUS>(anyvalue), 0);
    EXPECT_TRUE(m_ntstatus_ptr->SetCurValue(std::any(test_ntstatus_val)));
    anyvalue = m_ntstatus_ptr->GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(NTSTATUS));
    EXPECT_EQ(std::any_cast<NTSTATUS>(anyvalue), test_ntstatus_val);
    NTSTATUS ntstatus_val = 0x80000001;
    anyvalue = m_ntstatus_ptr->GetValue((char*)&ntstatus_val);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(NTSTATUS));
    EXPECT_EQ(std::any_cast<NTSTATUS>(anyvalue), ntstatus_val);
    EXPECT_TRUE(m_ntstatus_ptr->SetValue((char*)&test_ntstatus_val, std::any(ntstatus_val)));
    EXPECT_EQ(test_ntstatus_val, ntstatus_val);
    EXPECT_FALSE(m_ntstatus_ptr->SetValue((char*)&test_ntstatus_val, std::any(test_bool_val)));
    EXPECT_TRUE(m_ntstatus_ptr->SetValue((char*)&test_ntstatus_val, std::any((NTSTATUS)test_bool_val)));
    ntstatus_val = 0;
    m_ntstatus_ptr->SetCurValue(std::any(ntstatus_val));
    EXPECT_TRUE(m_ntstatus_ptr->Success((char*)&ntstatus_val));
    EXPECT_FALSE(m_ntstatus_ptr->Failed((char*)&ntstatus_val));
    ntstatus_val = (NTSTATUS)0xC0000005;
    EXPECT_FALSE(m_ntstatus_ptr->Success((char*)&ntstatus_val));
    EXPECT_TRUE(m_ntstatus_ptr->Failed((char*)&ntstatus_val));
    ntstatus_val = (NTSTATUS)0x927;
    EXPECT_TRUE(m_ntstatus_ptr->Success((char*)&ntstatus_val));
    EXPECT_FALSE(m_ntstatus_ptr->Failed((char*)&ntstatus_val));
    // test wstring type
    std::shared_ptr<CMetadataTypeObject> m_wstring_ptr = make_metadata_j_ptr<std::wstring>(CBaseDef::type_wstring, {}, CObObject::op_n_equal);
    ASSERT_TRUE(m_wstring_ptr != nullptr);
    EXPECT_EQ(std::static_pointer_cast<CBaseType<ULONG>>(m_wstring_ptr->GetMetadataDef())->GetBaseDef(), CBaseDef::type_wstring);
    EXPECT_EQ(m_wstring_ptr->GetName(), "std::wstring");
    EXPECT_EQ(m_wstring_ptr->GetObSize(), sizeof(std::wstring));
    EXPECT_EQ(m_wstring_ptr->GetObType(), CObObject::ob_basetype);
    EXPECT_EQ(m_wstring_ptr->GetOp(), CObObject::op_n_equal);
    EXPECT_FALSE(m_wstring_ptr->IsValidValue(nullptr));
    EXPECT_TRUE(m_wstring_ptr->IsValidValue((char*)&test_wstring_val));
    anyvalue = m_wstring_ptr->GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(std::wstring));
    EXPECT_EQ(std::any_cast<std::wstring>(anyvalue), L"\0");
    EXPECT_TRUE(m_wstring_ptr->SetCurValue(std::any(test_wstring_val)));
    anyvalue = m_wstring_ptr->GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(std::wstring));
    EXPECT_EQ(std::any_cast<std::wstring>(anyvalue), test_wstring_val);
    std::wstring wstring_val = { L"172.19.127.201" };
    anyvalue = m_wstring_ptr->GetValue((char*)&wstring_val);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(std::wstring));
    EXPECT_EQ(std::any_cast<std::wstring>(anyvalue), wstring_val);
    EXPECT_TRUE(m_wstring_ptr->SetValue((char*)&test_wstring_val, std::any(wstring_val)));
    EXPECT_EQ(test_wstring_val, wstring_val);
    EXPECT_FALSE(m_wstring_ptr->SetValue((char*)&test_wstring_val, std::any(test_bool_val)));
    wstring_val = {};
    m_wstring_ptr->SetCurValue(std::any(wstring_val));
    EXPECT_FALSE(m_wstring_ptr->Success((char*)&wstring_val));
    EXPECT_TRUE(m_wstring_ptr->Failed((char*)&wstring_val));
    wstring_val = { L"https::\\www.google.com" };
    EXPECT_TRUE(m_wstring_ptr->Success((char*)&wstring_val));
    EXPECT_FALSE(m_wstring_ptr->Failed((char*)&wstring_val));
    // test guid type
    std::shared_ptr<CMetadataTypeObject> m_guid_ptr = make_metadata_j_ptr<GUID>(CBaseDef::type_guid, {}, CObObject::op_n_equal);
    ASSERT_TRUE(m_guid_ptr != nullptr);
    EXPECT_EQ(std::static_pointer_cast<CBaseType<ULONG>>(m_guid_ptr->GetMetadataDef())->GetBaseDef(), CBaseDef::type_guid);
    EXPECT_EQ(m_guid_ptr->GetName(), "GUID");
    EXPECT_EQ(m_guid_ptr->GetObSize(), sizeof(GUID));
    EXPECT_EQ(m_guid_ptr->GetObType(), CObObject::ob_basetype);
    EXPECT_EQ(m_guid_ptr->GetOp(), CObObject::op_n_equal);
    EXPECT_FALSE(m_guid_ptr->IsValidValue(nullptr));
    EXPECT_TRUE(m_guid_ptr->IsValidValue((char*)&test_guid_val));
    anyvalue = m_guid_ptr->GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(GUID));
    EXPECT_EQ(std::any_cast<GUID>(anyvalue), GUID{});
    EXPECT_TRUE(m_guid_ptr->SetCurValue(std::any(test_guid_val)));
    anyvalue = m_guid_ptr->GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(GUID));
    EXPECT_EQ(std::any_cast<GUID>(anyvalue), test_guid_val);
    GUID guid_val = { 0x4590f811, 0x1d3a, 0x11d0, 0x1f, 0x89, 0x00, 0xaa, 0x00, 0x4b, 0x2e, 0x24 };
    anyvalue = m_guid_ptr->GetValue((char*)&guid_val);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(GUID));
    EXPECT_EQ(std::any_cast<GUID>(anyvalue), guid_val);
    EXPECT_TRUE(m_guid_ptr->SetValue((char*)&test_guid_val, std::any(guid_val)));
    EXPECT_EQ(test_guid_val, guid_val);
    EXPECT_FALSE(m_guid_ptr->SetValue((char*)&test_guid_val, std::any(test_bool_val)));
    guid_val = {};
    m_guid_ptr->SetCurValue(std::any(guid_val));
    EXPECT_FALSE(m_guid_ptr->Success((char*)&guid_val));
    EXPECT_TRUE(m_guid_ptr->Failed((char*)&guid_val));
    GUID guid_val_2 = { 0x4590f811, 0x1d3a, 0x11d0, 0x1f, 0x89, 0x11, 0xcc, 0x24, 0x73, 0x64, 0xbb };
    EXPECT_TRUE(m_guid_ptr->Success((char*)&guid_val_2));
    EXPECT_FALSE(m_guid_ptr->Failed((char*)&guid_val_2));
}

// test CReferenceObject
TEST_F(HookMetadataTest, CReferenceObject_Test)
{
    std::any anyvalue;
    // test CMetadataTypeObject comm reference
    std::shared_ptr<CMetadataTypeObject> m_ularge_integer_ptr = make_metadata_j_ptr<ULARGE_INTEGER>(CBaseDef::type_ularge_integer, {}, CObObject::op_n_equal);
    ASSERT_TRUE(m_ularge_integer_ptr != nullptr);
    CReferenceObject meta_reference("ULARGE_INTEGER*");
    meta_reference.AddReference(std::static_pointer_cast<CObObject>(m_ularge_integer_ptr));
    EXPECT_EQ(meta_reference.GetName(), "ULARGE_INTEGER*");
    EXPECT_EQ(meta_reference.GetObSize(), sizeof(PVOID));
    EXPECT_EQ(meta_reference.GetObType(), CObObject::ob_reference);
    EXPECT_EQ(meta_reference.GetOp(), CObObject::op_n_equal);
    EXPECT_FALSE(meta_reference.IsValidValue(nullptr));
    EXPECT_TRUE(meta_reference.IsValidValue((char*)&meta_reference_val));
    anyvalue = meta_reference.GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(ULARGE_INTEGER));
    EXPECT_EQ(std::any_cast<ULARGE_INTEGER>(anyvalue).QuadPart, 0);
    EXPECT_FALSE(meta_reference.SetCurValue(std::any(&meta_reference_val)));
    ULARGE_INTEGER ularge_integer_val = {(DWORD)20,(DWORD)-100};
    PULARGE_INTEGER p_val = &ularge_integer_val;
    PULARGE_INTEGER p_val_2 = &meta_reference_val;
    anyvalue = meta_reference.GetValue((char*)&p_val);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(PVOID));
    EXPECT_EQ(std::any_cast<PVOID>(anyvalue), (PVOID)&ularge_integer_val);
    EXPECT_TRUE(meta_reference.SetValue((char*)&p_val_2, std::any((PVOID)&ularge_integer_val)));
    EXPECT_EQ(p_val_2, p_val);
    EXPECT_FALSE(meta_reference.SetValue((char*)&p_val_2, std::any(&test_bool_val)));
    EXPECT_TRUE(meta_reference.SetValue((char*)(char*)&p_val_2, std::any((PVOID)&test_bool_val)));
    p_val = nullptr;
    EXPECT_FALSE(meta_reference.Success((char*)&p_val));
    EXPECT_TRUE(meta_reference.Failed((char*)&p_val));
    p_val = &ularge_integer_val;
    EXPECT_TRUE(meta_reference.Success((char*)&p_val));
    EXPECT_FALSE(meta_reference.Failed((char*)&p_val));
    // test CMetadataTypeObject wstring reference
    std::shared_ptr<CMetadataTypeObject> m_wchar_ptr = make_metadata_s_ptr<WCHAR>(CBaseDef::type_wchar);
    ASSERT_TRUE(m_wchar_ptr != nullptr);
    CReferenceObject wchar_reference("WCHAR*", std::static_pointer_cast<CObObject>(m_wchar_ptr));
    EXPECT_EQ(wchar_reference.GetName(), "WCHAR*");
    EXPECT_EQ(wchar_reference.GetObSize(), sizeof(PVOID));
    EXPECT_EQ(wchar_reference.GetObType(), CObObject::ob_stringref);
    EXPECT_EQ(wchar_reference.GetOp(), CObObject::op_n_equal);
    EXPECT_FALSE(wchar_reference.IsValidValue(nullptr));
    EXPECT_TRUE(wchar_reference.IsValidValue((char*)wstring_reference_val));
    anyvalue = wchar_reference.GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(WCHAR));
    EXPECT_EQ(std::any_cast<WCHAR>(anyvalue), L'\0');
    EXPECT_FALSE(wchar_reference.SetCurValue(std::any(wstring_reference_val)));
    WCHAR wstring_val[40] = L"https://www.github.com";
    WCHAR* p_wstring_1 = wstring_val;
    WCHAR* p_wstring_2 = wstring_reference_val;
    anyvalue = wchar_reference.GetValue((char*)&p_wstring_1);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(std::wstring));
    EXPECT_STREQ(std::any_cast<std::wstring>(anyvalue).c_str(), wstring_val);
    EXPECT_TRUE(wchar_reference.SetValue((char*)&p_wstring_2, std::any((PVOID)&wstring_val)));
    EXPECT_STREQ(p_wstring_1, wstring_val);
    EXPECT_FALSE(wchar_reference.SetValue((char*)&p_wstring_1, std::any(&test_bool_val)));
    EXPECT_TRUE(wchar_reference.SetValue((char*)(char*)&p_wstring_1, std::any((PVOID)&test_bool_val)));
    p_wstring_1 = nullptr;
    EXPECT_FALSE(wchar_reference.Success((char*)&p_wstring_1));
    EXPECT_TRUE(wchar_reference.Failed((char*)&p_wstring_1));
    p_wstring_1 = wstring_val;
    EXPECT_TRUE(wchar_reference.Success((char*)&p_wstring_1));
    EXPECT_FALSE(wchar_reference.Failed((char*)&p_wstring_1));
    // test CMetadataTypeObject ustring reference
    std::shared_ptr<CMetadataTypeObject> m_uchar_ptr = make_metadata_s_ptr<UCHAR>(CBaseDef::type_uchar);
    ASSERT_TRUE(m_uchar_ptr != nullptr);
    CReferenceObject uchar_reference("UCHAR*", std::static_pointer_cast<CObObject>(m_uchar_ptr));
    EXPECT_EQ(uchar_reference.GetName(), "UCHAR*");
    EXPECT_EQ(uchar_reference.GetObSize(), sizeof(PVOID));
    EXPECT_EQ(uchar_reference.GetObType(), CObObject::ob_stringref);
    EXPECT_EQ(uchar_reference.GetOp(), CObObject::op_n_equal);
    EXPECT_FALSE(uchar_reference.IsValidValue(nullptr));
    EXPECT_TRUE(uchar_reference.IsValidValue((char*)ustring_reference_val));
    anyvalue = uchar_reference.GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(UCHAR));
    EXPECT_EQ(std::any_cast<UCHAR>(anyvalue), '\0');
    EXPECT_FALSE(uchar_reference.SetCurValue(std::any(ustring_reference_val)));
    UCHAR ustring_val[40] = "https://www.github.com";
    UCHAR* p_ustring_1 = ustring_val;
    UCHAR* p_ustring_2 = ustring_reference_val;
    anyvalue = uchar_reference.GetValue((char*)&p_ustring_1);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(std::string));
    EXPECT_STREQ(std::any_cast<std::string>(anyvalue).c_str(), (char*)ustring_val);
    EXPECT_TRUE(uchar_reference.SetValue((char*)&p_ustring_2, std::any((PVOID)&ustring_val)));
    EXPECT_STREQ((char*)p_ustring_1, (char*)ustring_val);
    EXPECT_FALSE(uchar_reference.SetValue((char*)&p_ustring_1, std::any(&test_bool_val)));
    EXPECT_TRUE(uchar_reference.SetValue((char*)(char*)&p_ustring_1, std::any((PVOID)&test_bool_val)));
    p_ustring_1 = nullptr;
    EXPECT_FALSE(uchar_reference.Success((char*)&p_ustring_1));
    EXPECT_TRUE(uchar_reference.Failed((char*)&p_ustring_1));
    p_ustring_1 = ustring_val;
    EXPECT_TRUE(uchar_reference.Success((char*)&p_ustring_1));
    EXPECT_FALSE(uchar_reference.Failed((char*)&p_ustring_1));
    // test CArrayObject reference
    // test CTupleObject reference
    // test CStructObject reference
    // test CFlagObject reference
}

// test CArrayObject
TEST_F(HookMetadataTest, CArrayObject_Test)
{
    std::any anyvalue;
    // test GUID type CArrayObject
    std::shared_ptr<CMetadataTypeObject> m_guid_ptr = make_metadata_j_ptr<GUID>(CBaseDef::type_guid, {}, CObObject::op_n_equal);
    ASSERT_TRUE(m_guid_ptr != nullptr);
    CArrayObject guid_array("GUID[]");
    EXPECT_EQ(guid_array.GetObSize(), 0);
    guid_array.AddArray(std::static_pointer_cast<CObObject>(m_guid_ptr), TEST_ARRAY_DIM);
    EXPECT_EQ(guid_array.GetName(), "GUID[]");
    EXPECT_EQ(guid_array.GetObSize(), m_guid_ptr->GetObSize()*TEST_ARRAY_DIM);
    EXPECT_EQ(guid_array.GetObType(), CObObject::ob_array);
    EXPECT_EQ(guid_array.GetOp(), CObObject::op_n_equal);
    EXPECT_FALSE(guid_array.IsValidValue(nullptr));
    EXPECT_TRUE(guid_array.IsValidValue((char*)&test_guid_val));
    anyvalue = guid_array.GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(GUID));
    EXPECT_EQ(std::any_cast<GUID>(anyvalue), GUID{});
    EXPECT_TRUE(guid_array.SetCurValue(std::any(test_guid_val)));
    GUID guid_val = { 0x4590f811, 0x1d3a, 0x11d0, 0x1f, 0x89, 0x00, 0xaa, 0x00, 0x4b, 0x2e, 0x24 };
    GUID guid_array_val_2[TEST_ARRAY_DIM] = {};
    anyvalue = guid_array.GetValue((char*)&guid_val);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(GUID));
    EXPECT_EQ(std::any_cast<GUID>(anyvalue), guid_val);
    anyvalue = guid_array.GetValue((char*)guid_array_val, 10);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(GUID));
    EXPECT_EQ(std::any_cast<GUID>(anyvalue), guid_array_val[10]);
    EXPECT_TRUE(guid_array.SetValue((char*)guid_array_val_2, std::any(guid_val)));
    EXPECT_EQ(*guid_array_val_2, guid_val);
    EXPECT_FALSE(guid_array.SetValue((char*)&guid_array_val_2, std::any(test_bool_val)));
    EXPECT_TRUE(guid_array.SetValue((char*)&guid_array_val_2, std::any(guid_val), 10));
    EXPECT_EQ(guid_array_val_2[10], guid_val);
    EXPECT_TRUE(guid_array.SetArray((char*)&guid_array_val_2, std::any(guid_val), TEST_ARRAY_DIM));
    EXPECT_EQ(guid_array_val_2[0], guid_val);
    EXPECT_EQ(guid_array_val_2[5], guid_val);
    EXPECT_EQ(guid_array_val_2[10], guid_val);
    EXPECT_TRUE(guid_array.SetArray((char*)&guid_array_val_2, (char*)&guid_array_val, TEST_ARRAY_DIM));
    EXPECT_EQ(guid_array_val_2[0], guid_array_val[0]);
    EXPECT_EQ(guid_array_val_2[5], guid_array_val[5]);
    EXPECT_EQ(guid_array_val_2[10], guid_array_val[10]);
    EXPECT_TRUE(guid_array.Success((char*)&guid_val));
    EXPECT_FALSE(guid_array.Failed((char*)&guid_val));
}

// test CTupleObject
TEST_F(HookMetadataTest, CTupleObject_Test)
{
    EXPECT_TRUE(true);
}

// test CStructObject
TEST_F(HookMetadataTest, CStructObject_Test)
{
    std::any anyvalue;
    USHORT test_user[10] = { 1 };
    ULONG test_userlength = sizeof(test_user);
    USHORT test_domain[5] = { 5 };
    ULONG_PTR test_domainlength = sizeof(test_domain);
    USHORT test_password[8] = { 8 };
    ULONG test_passwordlength = sizeof(test_password);
    ULONG test_flags = 0x400;
    USHORT test_user_1[7] = { 33 };
    ULONG_PTR test_userlength_1 = sizeof(test_user_1);
    USHORT test_password_1[16] = { 55 };
    ULONG test_passwordlength_1 = sizeof(test_password_1);
    WCHAR* test_description = L"user name and password not empty!";

    COAUTHIDENTITY_TEST test_coa_struct = { test_user , test_userlength ,test_domain , test_domainlength , test_password , test_passwordlength , test_flags, test_description };
    // test COAUTHIDENTITY type CStructObject
    std::shared_ptr<CMetadataTypeObject> m_ushort_ptr = make_metadata_s_ptr<USHORT>(CBaseDef::type_ushort);
    std::shared_ptr<CMetadataTypeObject> m_ulong_ptr = make_metadata_s_ptr<ULONG>(CBaseDef::type_ulong);
    std::shared_ptr<CMetadataTypeObject> m_ulong_ptr_ptr = make_metadata_s_ptr<ULONG_PTR>(CBaseDef::type_ulong_ptr);
    std::shared_ptr<CMetadataTypeObject> m_wchar_ptr = make_metadata_s_ptr<WCHAR>(CBaseDef::type_wchar);
    ASSERT_TRUE(m_ushort_ptr != nullptr);
    ASSERT_TRUE(m_ulong_ptr != nullptr);
    ASSERT_TRUE(m_wchar_ptr != nullptr);
    std::shared_ptr<CReferenceObject> m_ushort_reference = std::make_shared<CReferenceObject>("USHORT*", std::static_pointer_cast<CObObject>(m_ushort_ptr));
    std::shared_ptr<CReferenceObject> m_wchar_reference = std::make_shared<CReferenceObject>("WCHAR*", std::static_pointer_cast<CObObject>(m_wchar_ptr));
    ASSERT_TRUE(m_ushort_reference != nullptr);
    ASSERT_TRUE(m_wchar_reference != nullptr);
    CStructObject m_struct_object("COAUTHIDENTITY");
    m_struct_object.AddElement("User", CStructObject::ElementTypeDefine{ "USHORT*", {0, m_ushort_reference} });
    size_t size = sizeof(USHORT*);
    EXPECT_EQ(m_struct_object.GetObSize(), size);
    m_struct_object.AddElement("UserLength", CStructObject::ElementTypeDefine{ "ULONG_PTR", {0, m_ulong_ptr_ptr} });
    size += sizeof(ULONG_PTR);
    EXPECT_EQ(m_struct_object.GetObSize(), size);
    m_struct_object.AddElement("Domain", CStructObject::ElementTypeDefine{ "USHORT*", {0, m_ushort_reference} });
    size += sizeof(USHORT*);
    EXPECT_EQ(m_struct_object.GetObSize(), size);
    m_struct_object.AddElement("DomainLength", CStructObject::ElementTypeDefine{ "ULONG_PTR", {0, m_ulong_ptr_ptr} });
    size += sizeof(ULONG_PTR);
    EXPECT_EQ(m_struct_object.GetObSize(), size);
    m_struct_object.AddElement("Password", CStructObject::ElementTypeDefine{ "USHORT*", {0, m_ushort_reference} });
    size += sizeof(USHORT*);
    EXPECT_EQ(m_struct_object.GetObSize(), size);
    m_struct_object.AddElement("PasswordLength", CStructObject::ElementTypeDefine{ "ULONG", {0, m_ulong_ptr} });
    size += sizeof(ULONG);
    EXPECT_EQ(m_struct_object.GetObSize(), size);
    m_struct_object.AddElement("Flags", CStructObject::ElementTypeDefine{ "ULONG", {0, m_ulong_ptr} });
    size += sizeof(ULONG);
    EXPECT_EQ(m_struct_object.GetObSize(), size);
    m_struct_object.AddElement("Description", CStructObject::ElementTypeDefine{ "BSTR", {0, m_wchar_reference} });
    size += sizeof(BSTR);
    EXPECT_EQ(m_struct_object.GetName(), "COAUTHIDENTITY");
    EXPECT_EQ(m_struct_object.GetObSize(), size);
    EXPECT_EQ(m_struct_object.GetObType(), CObObject::ob_struct);
    EXPECT_EQ(m_struct_object.GetOp(), CObObject::op_n_equal);
    EXPECT_FALSE(m_struct_object.IsValidValue(nullptr));
    EXPECT_TRUE(m_struct_object.IsValidValue((char*)&test_coa_struct));
    anyvalue = m_struct_object.GetCurValue();
    EXPECT_FALSE(anyvalue.has_value());
    EXPECT_FALSE(m_struct_object.SetCurValue(std::any(test_guid_val)));
    anyvalue = m_struct_object.GetValue((char*)&test_coa_struct);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(PVOID));
    EXPECT_EQ(std::any_cast<PVOID>(anyvalue), (PVOID)(test_coa_struct.User));
    anyvalue = m_struct_object.GetValue((char*)&test_coa_struct, "Password");
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(PVOID));
    EXPECT_EQ(std::any_cast<PVOID>(anyvalue), (PVOID)(test_coa_struct.Password));
    anyvalue = m_struct_object.GetValue((char*)&test_coa_struct, "PasswordLength");
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(ULONG));
    EXPECT_EQ(std::any_cast<ULONG>(anyvalue), test_coa_struct.PasswordLength);
    anyvalue = m_struct_object.GetValue((char*)&test_coa_struct, "Description");
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(std::wstring));
    EXPECT_EQ(std::any_cast<std::wstring>(anyvalue), std::wstring(test_description));
    EXPECT_FALSE(m_struct_object.SetCurValue(std::any(test_passwordlength_1)));
    EXPECT_TRUE(m_struct_object.SetValue((char*)&test_coa_struct, std::any((PVOID)test_user_1)));
    EXPECT_EQ(test_coa_struct.User, test_user_1);
    EXPECT_TRUE(m_struct_object.SetValue((char*)&test_coa_struct, "UserLength", std::any(test_userlength_1)));
    EXPECT_EQ(test_coa_struct.UserLength, test_userlength_1);
    EXPECT_TRUE(m_struct_object.SetValue((char*)&test_coa_struct, "Password", std::any((PVOID)test_password_1)));
    EXPECT_EQ(test_coa_struct.Password, test_password_1);
    EXPECT_TRUE(m_struct_object.SetValue((char*)&test_coa_struct, "PasswordLength", std::any(test_passwordlength_1)));
    EXPECT_EQ(test_coa_struct.PasswordLength, test_passwordlength_1);
    EXPECT_TRUE(m_struct_object.Success((char*)&test_passwordlength_1));
    EXPECT_FALSE(m_struct_object.Failed((char*)&test_passwordlength_1));
}

// test CFlagObject
TEST_F(HookMetadataTest, CFlagObject_Test)
{
    // test EXITFLAGS type CFlagObject
    std::any anyvalue;
    UINT test_exit_flag = EWX_SHUTDOWN | EWX_FORCE;
    UINT test_exit_flag_2 = 0;
    std::shared_ptr<CMetadataTypeObject> m_uint_ptr = make_metadata_s_ptr<UINT>(CBaseDef::type_uint);
    std::unique_ptr<std::map<std::string, unsigned int>> m_values_ptr = std::make_unique<std::map<std::string, unsigned int>>();
    ASSERT_TRUE(m_uint_ptr);
    ASSERT_TRUE(m_values_ptr);
    (*m_values_ptr)["EWX_HYBRID_SHUTDOWN"] = 0x400000;
    (*m_values_ptr)["EWX_LOGOFF"] = 0x0;
    (*m_values_ptr)["EWX_POWEROFF"] = 0x8;
    (*m_values_ptr)["EWX_REBOOT"] = 0x2;
    (*m_values_ptr)["EWX_RESTARTAPPS"] = 0x40;
    (*m_values_ptr)["EWX_SHUTDOWN"] = 0x1;
    (*m_values_ptr)["EWX_FORCE"] = 0x4;
    (*m_values_ptr)["EWX_FORCEIFHUNG"] = 0x10;
    CFlagObject m_flags_object("EXITFLAGS");
    EXPECT_EQ(m_flags_object.GetFlagOp(), CFlagObject::flag_invalid);
    EXPECT_EQ(m_flags_object.GetObSize(), 0);
    m_flags_object.AddFlags(m_uint_ptr, CFlagObject::flag_or, std::move(m_values_ptr));
    EXPECT_EQ(m_flags_object.GetFlagOp(), CFlagObject::flag_or);
    EXPECT_EQ(m_flags_object.GetObSize(), m_uint_ptr->GetObSize());
    EXPECT_EQ(m_flags_object.GetFlagOp("AND"), CFlagObject::flag_and);
    EXPECT_EQ(m_flags_object.GetName(), "EXITFLAGS");
    EXPECT_EQ(m_flags_object.GetObType(), CObObject::ob_flag);
    EXPECT_EQ(m_flags_object.GetOp(), CObObject::op_n_equal);
    EXPECT_FALSE(m_flags_object.IsValidValue(nullptr));
    EXPECT_TRUE(m_flags_object.IsValidValue((char*)&test_exit_flag));
    anyvalue = m_flags_object.GetCurValue();
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(UINT));
    EXPECT_EQ(std::any_cast<UINT>(anyvalue), 0);
    EXPECT_TRUE(m_flags_object.SetCurValue(std::any(test_exit_flag)));
    anyvalue = m_flags_object.GetValue((char*)&test_exit_flag);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(UINT));
    EXPECT_EQ(std::any_cast<UINT>(anyvalue), test_exit_flag);
    EXPECT_TRUE(m_flags_object.SetValue((char*)&test_exit_flag_2, anyvalue));
    EXPECT_EQ(test_exit_flag_2, test_exit_flag);
    anyvalue = m_flags_object.GetFlagStr(test_exit_flag);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(std::string));
    EXPECT_STREQ(std::any_cast<std::string>(anyvalue).c_str(), "EWX_FORCE | EWX_LOGOFF | EWX_SHUTDOWN");
    test_exit_flag_2 = 0x7ff00000 | EWX_REBOOT | EWX_FORCE;
    anyvalue = m_flags_object.GetFlagStr(test_exit_flag_2);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(std::string));
    EXPECT_STREQ(std::any_cast<std::string>(anyvalue).c_str(), "EWX_FORCE | EWX_HYBRID_SHUTDOWN | EWX_LOGOFF | EWX_REBOOT | unknown-flags:0x7fb00000");
    int flag = m_flags_object.GetFlagVa("EWX_LOGOFF");
    EXPECT_EQ(flag, 0);
    flag = m_flags_object.GetFlagVa("EWX_RESTARTAPPS");
    EXPECT_EQ(flag, 64);
    flag = m_flags_object.GetFlagVa("EWX_FORCEIFHUNG");
    EXPECT_EQ(flag, 16);
    flag = m_flags_object.GetFlagVa("EWX_FORCEIFHUNG | EWX_LOGOFF");
    EXPECT_EQ(flag, CFlagObject::InvalidFlagVa);
    EXPECT_TRUE(m_flags_object.Success((char*)&test_exit_flag));
    EXPECT_FALSE(m_flags_object.Failed((char*)&test_exit_flag));
}

// test CTypeSymbolTableObject
TEST_F(HookMetadataTest, CTypeSymbolTableObject_Test)
{
    EXPECT_EQ(CTypeSymbolTableObject::GetInstance().GetObSize(), 0);
    EXPECT_EQ(CTypeSymbolTableObject::GetInstance().GetName(), "type_symbol");
    EXPECT_EQ(CTypeSymbolTableObject::GetInstance().GetObType(), CObObject::ob_symboltable);
    EXPECT_EQ(CTypeSymbolTableObject::GetInstance().GetOp(), CObObject::op_n_equal);
    std::shared_ptr<CObObject> ob_ptr = CTypeSymbolTableObject::GetInstance().GetTypeSymbolReference("ULONG_PTR");
    ASSERT_TRUE(ob_ptr != nullptr);
    EXPECT_EQ(ob_ptr->GetName(), "ULONG_PTR");
    std::shared_ptr<CObObject> ob_ptr_2 = CTypeSymbolTableObject::GetInstance().GetTypeSymbolReference("LPULONG_PTR");
    EXPECT_FALSE(ob_ptr_2 != nullptr);
    std::shared_ptr<CObObject> ob_ptr_3 = std::make_shared<CReferenceObject>("LPULONG_PTR", ob_ptr);
    ASSERT_TRUE(ob_ptr_3 != nullptr);
    CTypeSymbolTableObject::GetInstance().AddTypeSymbol(std::make_pair("LPULONG_PTR", ob_ptr_3));
    std::shared_ptr<CObObject> ob_ptr_4 = CTypeSymbolTableObject::GetInstance().GetTypeSymbolReference("LPULONG_PTR");
    EXPECT_TRUE(ob_ptr_4 != nullptr);
    EXPECT_EQ(ob_ptr_4->GetName(), "LPULONG_PTR");
}

#endif
