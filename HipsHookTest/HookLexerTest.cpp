#include "stdafx.h"
#include <stdio.h>
#include <windows.h>
#include <string>
#include <vector>
#include "CBaseType.h"
#include "ParsingImpl.h"
#include "HipsHookTest.h"
#include "benchmark\benchmark.h"
#include "gtest\gtest.h"
#include "gmock\gmock.h"

#ifdef _FUNCTION_TEST

class HookLexerTest : public testing::Test
{
protected:
    typedef struct _COAUTHIDENTITY_TEST
    {
        /* [size_is] */ USHORT *User;
        /* [range] */ ULONG_PTR UserLength;
        /* [size_is] */ USHORT *Domain;
        /* [range] */ ULONG_PTR DomainLength;
        /* [size_is] */ USHORT *Password;
        /* [range] */ ULONG PasswordLength;
        ULONG Flags;
        BSTR Description;
    } 	COAUTHIDENTITY_TEST;

    typedef struct _TEST_STRUCT2 {
        IID* Data1;
        LPVOID Data2;
        wchar_t* Data3;
        MULTI_QI Data4[2];
    } TEST_STRUCT2;

    HookLexerTest() {}
    ~HookLexerTest() override {}

    virtual void SetUp() override {

    }

    void TearDown() override {

    }
};

// test CLexerTy
TEST_F(HookLexerTest, CLexerTy_GetWordRoot_Test)
{
    EXPECT_EQ(CLexerTy::GetInstance().GetWordRoot("LPVOID"), "VOID");
    EXPECT_EQ(CLexerTy::GetInstance().GetWordRoot("BYTE[100]"), "BYTE");
    EXPECT_EQ(CLexerTy::GetInstance().GetWordRoot("BOOL*"), "BOOL");
    EXPECT_EQ(CLexerTy::GetInstance().GetWordRoot("INT16*"), "INT16");
    EXPECT_EQ(CLexerTy::GetInstance().GetWordRoot("LPUCHAR*"), "UCHAR");
    EXPECT_EQ(CLexerTy::GetInstance().GetWordRoot("LPLONG_PTR"), "LONG_PTR");
    EXPECT_EQ(CLexerTy::GetInstance().GetWordRoot("LPULONG*"), "ULONG");
    EXPECT_EQ(CLexerTy::GetInstance().GetWordRoot("LPDWORD_PTR[200]"), "DWORD_PTR");
    EXPECT_EQ(CLexerTy::GetInstance().GetWordRoot("FLOAT*"), "FLOAT");
    EXPECT_EQ(CLexerTy::GetInstance().GetWordRoot("LPDOUBLE"), "DOUBLE");
    EXPECT_EQ(CLexerTy::GetInstance().GetWordRoot("INT64[30]"), "INT64");
    EXPECT_EQ(CLexerTy::GetInstance().GetWordRoot("ULONGLONG*"), "ULONGLONG");
    EXPECT_EQ(CLexerTy::GetInstance().GetWordRoot("LPLONGLONG"), "LONGLONG");
    EXPECT_EQ(CLexerTy::GetInstance().GetWordRoot("LPLARGE_INTEGER[50]"), "LARGE_INTEGER");
    EXPECT_EQ(CLexerTy::GetInstance().GetWordRoot("ULARGE_INTEGER*"), "ULARGE_INTEGER");
    EXPECT_EQ(CLexerTy::GetInstance().GetWordRoot("LPHANDLE"), "HANDLE");
    EXPECT_EQ(CLexerTy::GetInstance().GetWordRoot("HMODULE*"), "HMODULE");
    EXPECT_EQ(CLexerTy::GetInstance().GetWordRoot("HRESULT[2]"), "HRESULT");
    EXPECT_EQ(CLexerTy::GetInstance().GetWordRoot("LPSC_HANDLE"), "SC_HANDLE");
    EXPECT_EQ(CLexerTy::GetInstance().GetWordRoot("NTSTATUS"), "NTSTATUS");
    EXPECT_EQ(CLexerTy::GetInstance().GetWordRoot("std::string"), "std::string");
    EXPECT_EQ(CLexerTy::GetInstance().GetWordRoot("std::wstring*"), "std::wstring*");
    EXPECT_EQ(CLexerTy::GetInstance().GetWordRoot("LPLPLPLPLPLPLPLPLPLPLPLPLPLPLPLPLPLPLPLPLPLPLPLPLPLPLPLPLPLPLPLPLPLPGUID[100]"), "GUID");
    EXPECT_NE(CLexerTy::GetInstance().GetWordRoot("*LPVOID"), "VOID");
    EXPECT_NE(CLexerTy::GetInstance().GetWordRoot("GUID[]"), "GUID");
    EXPECT_NE(CLexerTy::GetInstance().GetWordRoot("BYTE*[100]"), "BYTE");
    EXPECT_NE(CLexerTy::GetInstance().GetWordRoot("*BOOL[20]"), "BOOL");
    EXPECT_NE(CLexerTy::GetInstance().GetWordRoot("UINT64[20][10]"), "UINT64");
    EXPECT_NE(CLexerTy::GetInstance().GetWordRoot("INT16LP"), "INT16");
    EXPECT_NE(CLexerTy::GetInstance().GetWordRoot("*UCHARLP"), "UCHAR");
    EXPECT_NE(CLexerTy::GetInstance().GetWordRoot("[20]LONG_PTR"), "LONG_PTR");
    EXPECT_NE(CLexerTy::GetInstance().GetWordRoot("LPULONG]5["), "ULONG");
    EXPECT_NE(CLexerTy::GetInstance().GetWordRoot("LPDWORD*_PTR[200]"), "DWORD_PTR");
    EXPECT_NE(CLexerTy::GetInstance().GetWordRoot("FLOAT[*]"), "FLOAT");
    EXPECT_NE(CLexerTy::GetInstance().GetWordRoot("[DOUBLE]"), "DOUBLE");
    EXPECT_NE(CLexerTy::GetInstance().GetWordRoot("INT64[*30]"), "INT64");
    EXPECT_NE(CLexerTy::GetInstance().GetWordRoot("ULONGLONGLP*"), "ULONGLONG");
    EXPECT_NE(CLexerTy::GetInstance().GetWordRoot("LPLO[NGLON]G"), "LONGLONG");
    EXPECT_NE(CLexerTy::GetInstance().GetWordRoot("LPLARGE_INTEGER[50_]"), "LARGE_INTEGER");
    EXPECT_NE(CLexerTy::GetInstance().GetWordRoot("_ULARGE_INTEGER*"), "ULARGE_INTEGER");
    EXPECT_NE(CLexerTy::GetInstance().GetWordRoot("LP*HANDLE"), "HANDLE");
    EXPECT_NE(CLexerTy::GetInstance().GetWordRoot("HMODLPULE"), "HMODULE");
    EXPECT_NE(CLexerTy::GetInstance().GetWordRoot("[*]HRESULT2"), "HRESULT");
    EXPECT_NE(CLexerTy::GetInstance().GetWordRoot("*LPVOID"), "VOID");
    EXPECT_NE(CLexerTy::GetInstance().GetWordRoot("*GUID*"), "GUID");
}

TEST_F(HookLexerTest, CLexerTy_GetIdentifier_Test)
{
    auto void_ref = CLexerTy::GetInstance().GetIdentifier("LPVOID");
    EXPECT_NE(void_ref, nullptr);
    EXPECT_EQ(void_ref->GetName(), "LPVOID");
    EXPECT_EQ(void_ref->GetObSize(), sizeof(LPVOID));
    EXPECT_EQ(void_ref->GetObType(), CObObject::ob_reference);
    EXPECT_EQ(std::static_pointer_cast<CReferenceObject>(void_ref)->GetData()->GetMetadataDef(), void_ref->GetMetadataDef());
    auto void_meta = std::static_pointer_cast<CReferenceObject>(void_ref)->GetData();
    EXPECT_EQ(void_meta->GetName(), "VOID");
    EXPECT_EQ(void_meta->GetObSize(), 0);
    EXPECT_EQ(void_meta->GetObType(), CObObject::ob_basetype);
    auto byte_array = CLexerTy::GetInstance().GetIdentifier("BYTE[100]");
    EXPECT_NE(byte_array, nullptr);
    EXPECT_EQ(byte_array->GetName(), "BYTE[100]");
    EXPECT_EQ(byte_array->GetObSize(), sizeof(BYTE)*100);
    EXPECT_EQ(byte_array->GetObType(), CObObject::ob_array);
    EXPECT_EQ(std::static_pointer_cast<CArrayObject>(byte_array)->GetData()->GetMetadataDef(), byte_array->GetMetadataDef());
    auto byte_meta = std::static_pointer_cast<CArrayObject>(byte_array)->GetData();
    EXPECT_EQ(byte_meta->GetName(), "BYTE");
    EXPECT_EQ(byte_meta->GetObSize(), sizeof(BYTE));
    EXPECT_EQ(byte_meta->GetObType(), CObObject::ob_basetype);
    auto guid_ref = CLexerTy::GetInstance().GetIdentifier("GUID*");
    EXPECT_NE(guid_ref, nullptr);
    EXPECT_EQ(guid_ref->GetName(), "GUID*");
    EXPECT_EQ(guid_ref->GetObSize(), sizeof(LPGUID));
    EXPECT_EQ(guid_ref->GetObType(), CObObject::ob_reference);
    EXPECT_EQ(std::static_pointer_cast<CReferenceObject>(guid_ref)->GetData()->GetMetadataDef(), guid_ref->GetMetadataDef());
    auto guid_meta = std::static_pointer_cast<CReferenceObject>(guid_ref)->GetData();
    EXPECT_EQ(guid_meta->GetName(), "GUID");
    EXPECT_EQ(guid_meta->GetObSize(), sizeof(GUID));
    EXPECT_EQ(guid_meta->GetObType(), CObObject::ob_basetype);
    auto lplarge_integer_array = CLexerTy::GetInstance().GetIdentifier("LPLARGE_INTEGER[20]");
    EXPECT_NE(lplarge_integer_array, nullptr);
    EXPECT_EQ(lplarge_integer_array->GetName(), "LPLARGE_INTEGER[20]");
    EXPECT_EQ(lplarge_integer_array->GetObSize(), sizeof(LARGE_INTEGER*)*20);
    EXPECT_EQ(lplarge_integer_array->GetObType(), CObObject::ob_array);
    EXPECT_EQ(std::static_pointer_cast<CArrayObject>(lplarge_integer_array)->GetData()->GetMetadataDef(), lplarge_integer_array->GetMetadataDef());
    auto large_integer_ref = std::static_pointer_cast<CArrayObject>(lplarge_integer_array)->GetData();
    EXPECT_EQ(large_integer_ref->GetName(), "LPLARGE_INTEGER");
    EXPECT_EQ(large_integer_ref->GetObSize(), sizeof(LARGE_INTEGER*));
    EXPECT_EQ(large_integer_ref->GetObType(), CObObject::ob_reference);
    auto large_integer_meta = std::static_pointer_cast<CReferenceObject>(large_integer_ref)->GetData();
    EXPECT_EQ(large_integer_meta->GetName(), "LARGE_INTEGER");
    EXPECT_EQ(large_integer_meta->GetObSize(), sizeof(LARGE_INTEGER));
    EXPECT_EQ(large_integer_meta->GetObType(), CObObject::ob_basetype);
    auto lplpdword_ptr_array = CLexerTy::GetInstance().GetIdentifier("LPLPDWORD_PTR[100]");
    EXPECT_NE(lplpdword_ptr_array, nullptr);
    EXPECT_EQ(lplpdword_ptr_array->GetName(), "LPLPDWORD_PTR[100]");
    EXPECT_EQ(lplpdword_ptr_array->GetObSize(), sizeof(DWORD_PTR*) * 100);
    EXPECT_EQ(lplpdword_ptr_array->GetObType(), CObObject::ob_array);
    EXPECT_EQ(std::static_pointer_cast<CArrayObject>(lplpdword_ptr_array)->GetData()->GetMetadataDef(), lplpdword_ptr_array->GetMetadataDef());
    auto lpdword_ptr_ref = std::static_pointer_cast<CArrayObject>(lplpdword_ptr_array)->GetData();
    EXPECT_EQ(lpdword_ptr_ref->GetName(), "LPLPDWORD_PTR");
    EXPECT_EQ(lpdword_ptr_ref->GetObSize(), sizeof(DWORD_PTR*));
    EXPECT_EQ(lpdword_ptr_ref->GetObType(), CObObject::ob_reference);
    auto dword_ptr_ref = std::static_pointer_cast<CReferenceObject>(lpdword_ptr_ref)->GetData();
    EXPECT_EQ(dword_ptr_ref->GetName(), "LPDWORD_PTR");
    EXPECT_EQ(dword_ptr_ref->GetObSize(), sizeof(DWORD_PTR*));
    EXPECT_EQ(dword_ptr_ref->GetObType(), CObObject::ob_reference);
    auto dword_ptr_meta = std::static_pointer_cast<CReferenceObject>(dword_ptr_ref)->GetData();
    EXPECT_EQ(dword_ptr_meta->GetName(), "DWORD_PTR");
    EXPECT_EQ(dword_ptr_meta->GetObSize(), sizeof(DWORD_PTR));
    EXPECT_EQ(dword_ptr_meta->GetObType(), CObObject::ob_basetype);
    auto err_ref = CLexerTy::GetInstance().GetIdentifier("PVOID");
    EXPECT_EQ(err_ref, nullptr);
    err_ref = CLexerTy::GetInstance().GetIdentifier("PVOID*");
    EXPECT_EQ(err_ref, nullptr);
    err_ref = CLexerTy::GetInstance().GetIdentifier("GUID[]");
    EXPECT_EQ(err_ref, nullptr);
    err_ref = CLexerTy::GetInstance().GetIdentifier("BYTE*[100]");
    EXPECT_EQ(err_ref, nullptr);
    err_ref = CLexerTy::GetInstance().GetIdentifier("*BOOL[20]");
    EXPECT_EQ(err_ref, nullptr);
    err_ref = CLexerTy::GetInstance().GetIdentifier("UINT64[20][10]");
    EXPECT_EQ(err_ref, nullptr);
    err_ref = CLexerTy::GetInstance().GetIdentifier("INT16LP");
    EXPECT_EQ(err_ref, nullptr);
    err_ref = CLexerTy::GetInstance().GetIdentifier("*UCHARLP");
    EXPECT_EQ(err_ref, nullptr);
    err_ref = CLexerTy::GetInstance().GetIdentifier("[20]LONG_PTR");
    EXPECT_EQ(err_ref, nullptr);
    err_ref = CLexerTy::GetInstance().GetIdentifier("LPULONG]5[");
    EXPECT_EQ(err_ref, nullptr);
    err_ref = CLexerTy::GetInstance().GetIdentifier("LPDWORD*_PTR[200]");
    EXPECT_EQ(err_ref, nullptr);
    err_ref = CLexerTy::GetInstance().GetIdentifier("FLOAT[*]");
    EXPECT_EQ(err_ref, nullptr);
    err_ref = CLexerTy::GetInstance().GetIdentifier("[DOUBLE]");
    EXPECT_EQ(err_ref, nullptr);
    err_ref = CLexerTy::GetInstance().GetIdentifier("INT64[*30]");
    EXPECT_EQ(err_ref, nullptr);
    err_ref = CLexerTy::GetInstance().GetIdentifier("ULONGLONGLP*");
    EXPECT_EQ(err_ref, nullptr);
    err_ref = CLexerTy::GetInstance().GetIdentifier("LPLO[NGLON]G");
    EXPECT_EQ(err_ref, nullptr);
    err_ref = CLexerTy::GetInstance().GetIdentifier("LPLARGE_INTEGER[50_]");
    EXPECT_EQ(err_ref, nullptr);
    err_ref = CLexerTy::GetInstance().GetIdentifier("_ULARGE_INTEGER*");
    EXPECT_EQ(err_ref, nullptr);
    err_ref = CLexerTy::GetInstance().GetIdentifier("LP*HANDLE");
    EXPECT_EQ(err_ref, nullptr);
    err_ref = CLexerTy::GetInstance().GetIdentifier("PHMODULE");
    EXPECT_EQ(err_ref, nullptr);
    err_ref = CLexerTy::GetInstance().GetIdentifier("[*]HRESULT2");
    EXPECT_EQ(err_ref, nullptr);
    err_ref = CLexerTy::GetInstance().GetIdentifier("*LPVOID");
    EXPECT_EQ(err_ref, nullptr);
    err_ref = CLexerTy::GetInstance().GetIdentifier("*GUID*");
    EXPECT_EQ(err_ref, nullptr);
}

TEST_F(HookLexerTest, CLexerTy_AddIdentifier_Test)
{
    std::shared_ptr<CObObject> ob_ptr = CTypeSymbolTableObject::GetInstance().GetTypeSymbolReference("HANDLE");
    ASSERT_TRUE(ob_ptr != nullptr);
    std::shared_ptr<CObObject> hwnd_ptr = std::make_shared<CMetadataTypeObject>("HWND1", ob_ptr);
    ASSERT_TRUE(hwnd_ptr != nullptr);
    ASSERT_TRUE(CLexerTy::GetInstance().AddIdentifier(IDENPAIR("HWND1", hwnd_ptr)));
    auto hwnd_ref = CLexerTy::GetInstance().GetIdentifier("HWND1");
    EXPECT_NE(hwnd_ref, nullptr);
    EXPECT_EQ(hwnd_ref->GetName(), "HWND1");
    EXPECT_EQ(hwnd_ref->GetObSize(), sizeof(HANDLE));
    EXPECT_EQ(hwnd_ref->GetObType(), CObObject::ob_basetype);
}

// test CLexerVr
TEST_F(HookLexerTest, CLexerVr_GetWordRoot_Test)
{
    CLexerVr lexer_vr_object;
    EXPECT_EQ(lexer_vr_object.GetWordRoot("*lpPointer"), "lpPointer");
    EXPECT_EQ(lexer_vr_object.GetWordRoot("*(lpPointer)"), "lpPointer");
    EXPECT_EQ(lexer_vr_object.GetWordRoot("(*lpPointer)"), "lpPointer");
    EXPECT_EQ(lexer_vr_object.GetWordRoot("(p_str->pointer)"), "p_str");
    EXPECT_EQ(lexer_vr_object.GetWordRoot("p_tr_->data[4].win32"), "p_tr_");
    EXPECT_EQ(lexer_vr_object.GetWordRoot("p_tr_.data[4]->win32"), "p_tr_");
    EXPECT_EQ(lexer_vr_object.GetWordRoot("*(_authIdentityData.pwszServerPrincName)->dwAuthnLevel"), "_authIdentityData");
    EXPECT_EQ(lexer_vr_object.GetWordRoot("(*pIID).Data1"), "pIID");
    EXPECT_EQ(lexer_vr_object.GetWordRoot("*(_struct_array_[6]).Data1"), "_struct_array_");
    EXPECT_EQ(lexer_vr_object.GetWordRoot("lpPoin4ter->test_win32.a1pifunc_->abc.pdata->tnci3d"), "lpPoin4ter");
    EXPECT_NE(lexer_vr_object.GetWordRoot("**lpPointer"), "lpPointer");
    EXPECT_NE(lexer_vr_object.GetWordRoot("*(lpPointer"), "lpPointer");
    EXPECT_EQ(lexer_vr_object.GetWordRoot("(*lpPointer)[6]"), "lpPointer");
    EXPECT_NE(lexer_vr_object.GetWordRoot("p_str->pointer)"), "p_str");
    EXPECT_EQ(lexer_vr_object.GetWordRoot("p_tr_->data[4a].win32"), "p_tr_");
    EXPECT_NE(lexer_vr_object.GetWordRoot("*(_authIdentityData.->pwszServerPrincName)->dwAuthnLevel"), "_authIdentityData");
    EXPECT_EQ(lexer_vr_object.GetWordRoot("(*pIID)..Data1"), "pIID");
    EXPECT_NE(lexer_vr_object.GetWordRoot("*(_struct_.array_[6]).Data1"), "_struct_array_");
    EXPECT_NE(lexer_vr_object.GetWordRoot("lpPoin4ter->[3]test_win32.a1pifunc_->abc.pdata->tnci3d"), "lpPoin4ter");
}

// test CLexerVr
TEST_F(HookLexerTest, CLexerVr_GetIdentifier_Test)
{
    CLexerVr lexer_vr_object;
    // test complex struct
    std::shared_ptr<CObObject> test_struct = CLexerTy::GetInstance().GetIdentifier("TEST_STRUCT1");
    ASSERT_TRUE(test_struct != nullptr);
    ASSERT_TRUE(lexer_vr_object.AddIdentifier(IDENPAIR("test_vr_struct1", test_struct)));
    test_struct = CLexerTy::GetInstance().GetIdentifier("TEST_STRUCT2");
    ASSERT_TRUE(test_struct != nullptr);
    ASSERT_TRUE(lexer_vr_object.AddIdentifier(IDENPAIR("test_vr_struct2", test_struct)));
    std::shared_ptr<CObObject> test_vr_struct1 = lexer_vr_object.GetIdentifier("test_vr_struct1");
    ASSERT_TRUE(test_vr_struct1 != nullptr);
    ASSERT_TRUE(test_vr_struct1->GetObType() == CObObject::ob_struct);
    test_vr_struct1 = lexer_vr_object.GetIdentifier("test_vr_struct1.Data5->DomainLength");
    ASSERT_TRUE(test_vr_struct1 != nullptr);
    ASSERT_TRUE(test_vr_struct1->GetObType() == CObObject::ob_tuple);
    std::shared_ptr<CTupleObject> tuple_object = std::static_pointer_cast<CTupleObject>(test_vr_struct1);
    EXPECT_EQ(tuple_object->GetElemCount(), 4);
    std::any anyvalue = tuple_object->GetElement(0);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(CTupleObject::_tuple_elem*));
    auto elem = std::any_cast<CTupleObject::_tuple_elem*>(anyvalue);
    EXPECT_TRUE(elem != nullptr);
    EXPECT_TRUE(elem->ptr != nullptr);
    EXPECT_EQ(elem->ptr->GetName(), "TEST_STRUCT1");
    EXPECT_EQ(elem->ptr->GetObType(), CObObject::ob_struct);
    EXPECT_EQ(elem->struc.idx, 4);
    anyvalue = tuple_object->GetElement(1);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(CTupleObject::_tuple_elem*));
    elem = std::any_cast<CTupleObject::_tuple_elem*>(anyvalue);
    EXPECT_TRUE(elem != nullptr);
    EXPECT_TRUE(elem->ptr != nullptr);
    EXPECT_EQ(elem->ptr->GetName(), "LPCOAUTHIDENTITY");
    EXPECT_EQ(elem->ptr->GetObType(), CObObject::ob_reference);
    EXPECT_EQ(elem->ref.tuple_ref, CTupleObject::_tuple_ref::tuple_ref_val);
    anyvalue = tuple_object->GetElement(2);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(CTupleObject::_tuple_elem*));
    elem = std::any_cast<CTupleObject::_tuple_elem*>(anyvalue);
    EXPECT_TRUE(elem != nullptr);
    EXPECT_TRUE(elem->ptr != nullptr);
    EXPECT_EQ(elem->ptr->GetName(), "COAUTHIDENTITY");
    EXPECT_EQ(elem->ptr->GetObType(), CObObject::ob_struct);
    EXPECT_EQ(elem->struc.idx, 3);
    anyvalue = tuple_object->GetElement(3);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(CTupleObject::_tuple_elem*));
    elem = std::any_cast<CTupleObject::_tuple_elem*>(anyvalue);
    EXPECT_TRUE(elem != nullptr);
    EXPECT_TRUE(elem->ptr != nullptr);
    EXPECT_EQ(elem->ptr->GetName(), "ULONG_PTR");
    EXPECT_EQ(elem->ptr->GetObType(), CObObject::ob_basetype);
    std::shared_ptr<CObObject> test_vr_struct2 = lexer_vr_object.GetIdentifier("*(test_vr_struct2.Data2)->Data5->Password");
    ASSERT_TRUE(test_vr_struct2 != nullptr);
    ASSERT_TRUE(test_vr_struct2->GetObType() == CObObject::ob_tuple);
    tuple_object = std::static_pointer_cast<CTupleObject>(test_vr_struct2);
    EXPECT_EQ(tuple_object->GetElemCount(), 7);
    anyvalue = tuple_object->GetElement(0);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(CTupleObject::_tuple_elem*));
    elem = std::any_cast<CTupleObject::_tuple_elem*>(anyvalue);
    EXPECT_TRUE(elem != nullptr);
    EXPECT_TRUE(elem->ptr != nullptr);
    EXPECT_EQ(elem->ptr->GetName(), "TEST_STRUCT2");
    EXPECT_EQ(elem->ptr->GetObType(), CObObject::ob_struct);
    EXPECT_EQ(elem->struc.idx, 1);
    anyvalue = tuple_object->GetElement(1);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(CTupleObject::_tuple_elem*));
    elem = std::any_cast<CTupleObject::_tuple_elem*>(anyvalue);
    EXPECT_TRUE(elem != nullptr);
    EXPECT_TRUE(elem->ptr != nullptr);
    EXPECT_EQ(elem->ptr->GetName(), "LPTEST_ADT1*");
    EXPECT_EQ(elem->ptr->GetObType(), CObObject::ob_reference);
    EXPECT_EQ(elem->ref.tuple_ref, CTupleObject::_tuple_ref::tuple_ref_val);
    anyvalue = tuple_object->GetElement(2);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(CTupleObject::_tuple_elem*));
    elem = std::any_cast<CTupleObject::_tuple_elem*>(anyvalue);
    EXPECT_TRUE(elem != nullptr);
    EXPECT_TRUE(elem->ptr != nullptr);
    EXPECT_EQ(elem->ptr->GetName(), "LPTEST_ADT1");
    EXPECT_EQ(elem->ptr->GetObType(), CObObject::ob_reference);
    EXPECT_EQ(elem->ref.tuple_ref, CTupleObject::_tuple_ref::tuple_ref_val);
    anyvalue = tuple_object->GetElement(3);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(CTupleObject::_tuple_elem*));
    elem = std::any_cast<CTupleObject::_tuple_elem*>(anyvalue);
    EXPECT_TRUE(elem != nullptr);
    EXPECT_TRUE(elem->ptr != nullptr);
    EXPECT_EQ(elem->ptr->GetName(), "TEST_STRUCT1");
    EXPECT_EQ(elem->ptr->GetObType(), CObObject::ob_struct);
    EXPECT_EQ(elem->struc.idx, 4);
    anyvalue = tuple_object->GetElement(4);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(CTupleObject::_tuple_elem*));
    elem = std::any_cast<CTupleObject::_tuple_elem*>(anyvalue);
    EXPECT_TRUE(elem != nullptr);
    EXPECT_TRUE(elem->ptr != nullptr);
    EXPECT_EQ(elem->ptr->GetName(), "LPCOAUTHIDENTITY");
    EXPECT_EQ(elem->ptr->GetObType(), CObObject::ob_reference);
    EXPECT_EQ(elem->ref.tuple_ref, CTupleObject::_tuple_ref::tuple_ref_val);
    anyvalue = tuple_object->GetElement(5);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(CTupleObject::_tuple_elem*));
    elem = std::any_cast<CTupleObject::_tuple_elem*>(anyvalue);
    EXPECT_TRUE(elem != nullptr);
    EXPECT_TRUE(elem->ptr != nullptr);
    EXPECT_EQ(elem->ptr->GetName(), "COAUTHIDENTITY");
    EXPECT_EQ(elem->ptr->GetObType(), CObObject::ob_struct);
    EXPECT_EQ(elem->struc.idx, 4);
    anyvalue = tuple_object->GetElement(6);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(CTupleObject::_tuple_elem*));
    elem = std::any_cast<CTupleObject::_tuple_elem*>(anyvalue);
    EXPECT_TRUE(elem != nullptr);
    EXPECT_TRUE(elem->ptr != nullptr);
    EXPECT_EQ(elem->ptr->GetName(), "USHORT*");
    EXPECT_EQ(elem->ptr->GetObType(), CObObject::ob_reference);
    EXPECT_EQ(elem->ref.tuple_ref, CTupleObject::_tuple_ref::tuple_ref_addr);
    // test common variant
    std::shared_ptr<CObObject> test_var = CLexerTy::GetInstance().GetIdentifier("TEST_ADT2");
    ASSERT_TRUE(test_var != nullptr);
    ASSERT_TRUE(lexer_vr_object.AddIdentifier(IDENPAIR("test_var1", test_var)));
    std::shared_ptr<CObObject> test_vr_var1 = lexer_vr_object.GetIdentifier("*test_var1");
    ASSERT_TRUE(test_vr_var1 != nullptr);
    ASSERT_TRUE(test_vr_var1->GetObType() == CObObject::ob_tuple);
    tuple_object = std::static_pointer_cast<CTupleObject>(test_vr_var1);
    EXPECT_EQ(tuple_object->GetElemCount(), 2);
    anyvalue = tuple_object->GetElement(0);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(CTupleObject::_tuple_elem*));
    elem = std::any_cast<CTupleObject::_tuple_elem*>(anyvalue);
    EXPECT_TRUE(elem != nullptr);
    EXPECT_TRUE(elem->ptr != nullptr);
    EXPECT_EQ(elem->ptr->GetName(), "EXITFLAGS*");
    EXPECT_EQ(elem->ptr->GetObType(), CObObject::ob_reference);
    EXPECT_EQ(elem->ref.tuple_ref, CTupleObject::_tuple_ref::tuple_ref_val);
    anyvalue = tuple_object->GetElement(1);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(CTupleObject::_tuple_elem*));
    elem = std::any_cast<CTupleObject::_tuple_elem*>(anyvalue);
    EXPECT_TRUE(elem != nullptr);
    EXPECT_TRUE(elem->ptr != nullptr);
    EXPECT_EQ(elem->ptr->GetName(), "EXITFLAGS");
    EXPECT_EQ(elem->ptr->GetObType(), CObObject::ob_flag);
    EXPECT_EQ(elem->flag.tuple_flg, CTupleObject::_tuple_flg::tuple_flg_str);
    test_vr_var1 = lexer_vr_object.GetIdentifier("*(test_var1)");
    ASSERT_TRUE(test_vr_var1 != nullptr);
    ASSERT_TRUE(test_vr_var1->GetObType() == CObObject::ob_tuple);
    tuple_object = std::static_pointer_cast<CTupleObject>(test_vr_var1);
    EXPECT_EQ(tuple_object->GetElemCount(), 2);
    anyvalue = tuple_object->GetElement(0);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(CTupleObject::_tuple_elem*));
    elem = std::any_cast<CTupleObject::_tuple_elem*>(anyvalue);
    EXPECT_TRUE(elem != nullptr);
    EXPECT_TRUE(elem->ptr != nullptr);
    EXPECT_EQ(elem->ptr->GetName(), "EXITFLAGS*");
    EXPECT_EQ(elem->ptr->GetObType(), CObObject::ob_reference);
    EXPECT_EQ(elem->ref.tuple_ref, CTupleObject::_tuple_ref::tuple_ref_val);
    anyvalue = tuple_object->GetElement(1);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(CTupleObject::_tuple_elem*));
    elem = std::any_cast<CTupleObject::_tuple_elem*>(anyvalue);
    EXPECT_TRUE(elem != nullptr);
    EXPECT_TRUE(elem->ptr != nullptr);
    EXPECT_EQ(elem->ptr->GetName(), "EXITFLAGS");
    EXPECT_EQ(elem->ptr->GetObType(), CObObject::ob_flag);
    EXPECT_EQ(elem->flag.tuple_flg, CTupleObject::_tuple_flg::tuple_flg_str);
    test_vr_var1 = lexer_vr_object.GetIdentifier("(*test_var1)");
    ASSERT_TRUE(test_vr_var1 != nullptr);
    ASSERT_TRUE(test_vr_var1->GetObType() == CObObject::ob_tuple);
    tuple_object = std::static_pointer_cast<CTupleObject>(test_vr_var1);
    EXPECT_EQ(tuple_object->GetElemCount(), 2);
    anyvalue = tuple_object->GetElement(0);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(CTupleObject::_tuple_elem*));
    elem = std::any_cast<CTupleObject::_tuple_elem*>(anyvalue);
    EXPECT_TRUE(elem != nullptr);
    EXPECT_TRUE(elem->ptr != nullptr);
    EXPECT_EQ(elem->ptr->GetName(), "EXITFLAGS*");
    EXPECT_EQ(elem->ptr->GetObType(), CObObject::ob_reference);
    EXPECT_EQ(elem->ref.tuple_ref, CTupleObject::_tuple_ref::tuple_ref_val);
    anyvalue = tuple_object->GetElement(1);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(CTupleObject::_tuple_elem*));
    elem = std::any_cast<CTupleObject::_tuple_elem*>(anyvalue);
    EXPECT_TRUE(elem != nullptr);
    EXPECT_TRUE(elem->ptr != nullptr);
    EXPECT_EQ(elem->ptr->GetName(), "EXITFLAGS");
    EXPECT_EQ(elem->ptr->GetObType(), CObObject::ob_flag);
    EXPECT_EQ(elem->flag.tuple_flg, CTupleObject::_tuple_flg::tuple_flg_str);
    // test array
    std::shared_ptr<CObObject> test_arr = CLexerTy::GetInstance().GetIdentifier("TEST_ADT3");
    ASSERT_TRUE(test_arr != nullptr);
    ASSERT_TRUE(lexer_vr_object.AddIdentifier(IDENPAIR("test_arr", test_arr)));
    std::shared_ptr<CObObject> test_vr_arr = lexer_vr_object.GetIdentifier("(test_arr[20])->dwAuthnLevel");
    ASSERT_TRUE(test_vr_arr != nullptr);
    ASSERT_TRUE(test_vr_arr->GetObType() == CObObject::ob_tuple);
    tuple_object = std::static_pointer_cast<CTupleObject>(test_vr_arr);
    EXPECT_EQ(tuple_object->GetElemCount(), 4);
    anyvalue = tuple_object->GetElement(0);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(CTupleObject::_tuple_elem*));
    elem = std::any_cast<CTupleObject::_tuple_elem*>(anyvalue);
    EXPECT_TRUE(elem != nullptr);
    EXPECT_TRUE(elem->ptr != nullptr);
    EXPECT_EQ(elem->ptr->GetName(), "LPCOAUTHINFO[100]");
    EXPECT_EQ(elem->ptr->GetObType(), CObObject::ob_array);
    EXPECT_EQ(elem->arr.dim, 20);
    anyvalue = tuple_object->GetElement(1);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(CTupleObject::_tuple_elem*));
    elem = std::any_cast<CTupleObject::_tuple_elem*>(anyvalue);
    EXPECT_TRUE(elem != nullptr);
    EXPECT_TRUE(elem->ptr != nullptr);
    EXPECT_EQ(elem->ptr->GetName(), "LPCOAUTHINFO");
    EXPECT_EQ(elem->ptr->GetObType(), CObObject::ob_reference);
    EXPECT_EQ(elem->ref.tuple_ref, CTupleObject::_tuple_ref::tuple_ref_val);
    anyvalue = tuple_object->GetElement(2);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(CTupleObject::_tuple_elem*));
    elem = std::any_cast<CTupleObject::_tuple_elem*>(anyvalue);
    EXPECT_TRUE(elem != nullptr);
    EXPECT_TRUE(elem->ptr != nullptr);
    EXPECT_EQ(elem->ptr->GetName(), "COAUTHINFO");
    EXPECT_EQ(elem->ptr->GetObType(), CObObject::ob_struct);
    EXPECT_EQ(elem->struc.idx, 3);
    anyvalue = tuple_object->GetElement(3);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(CTupleObject::_tuple_elem*));
    elem = std::any_cast<CTupleObject::_tuple_elem*>(anyvalue);
    EXPECT_TRUE(elem != nullptr);
    EXPECT_TRUE(elem->ptr != nullptr);
    EXPECT_EQ(elem->ptr->GetName(), "DWORD");
    EXPECT_EQ(elem->ptr->GetObType(), CObObject::ob_basetype);
    std::shared_ptr<CObObject> test_adt4 = CLexerTy::GetInstance().GetIdentifier("TEST_ADT4");
    ASSERT_TRUE(test_adt4 != nullptr);
    ASSERT_TRUE(lexer_vr_object.AddIdentifier(IDENPAIR("test_adt4", test_adt4)));
    std::shared_ptr<CObObject> test_vr_adt4 = lexer_vr_object.GetIdentifier("*test_adt4.Data4[1].hr");
    ASSERT_TRUE(test_vr_adt4 != nullptr);
    ASSERT_TRUE(test_vr_adt4->GetObType() == CObObject::ob_tuple);
    tuple_object = std::static_pointer_cast<CTupleObject>(test_vr_adt4);
    EXPECT_EQ(tuple_object->GetElemCount(), 5);
    anyvalue = tuple_object->GetElement(0);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(CTupleObject::_tuple_elem*));
    elem = std::any_cast<CTupleObject::_tuple_elem*>(anyvalue);
    EXPECT_TRUE(elem != nullptr);
    EXPECT_TRUE(elem->ptr != nullptr);
    EXPECT_EQ(elem->ptr->GetName(), "TEST_STRUCT2*");
    EXPECT_EQ(elem->ptr->GetObType(), CObObject::ob_reference);
    EXPECT_EQ(elem->ref.tuple_ref, CTupleObject::_tuple_ref::tuple_ref_val);
    anyvalue = tuple_object->GetElement(1);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(CTupleObject::_tuple_elem*));
    elem = std::any_cast<CTupleObject::_tuple_elem*>(anyvalue);
    EXPECT_TRUE(elem != nullptr);
    EXPECT_TRUE(elem->ptr != nullptr);
    EXPECT_EQ(elem->ptr->GetName(), "TEST_STRUCT2");
    EXPECT_EQ(elem->ptr->GetObType(), CObObject::ob_struct);
    EXPECT_EQ(elem->struc.idx, 3);
    anyvalue = tuple_object->GetElement(2);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(CTupleObject::_tuple_elem*));
    elem = std::any_cast<CTupleObject::_tuple_elem*>(anyvalue);
    EXPECT_TRUE(elem != nullptr);
    EXPECT_TRUE(elem->ptr != nullptr);
    EXPECT_EQ(elem->ptr->GetName(), "MULTI_QI[2]");
    EXPECT_EQ(elem->ptr->GetObType(), CObObject::ob_array);
    EXPECT_EQ(elem->arr.dim, 1);
    anyvalue = tuple_object->GetElement(3);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(CTupleObject::_tuple_elem*));
    elem = std::any_cast<CTupleObject::_tuple_elem*>(anyvalue);
    EXPECT_TRUE(elem != nullptr);
    EXPECT_TRUE(elem->ptr != nullptr);
    EXPECT_EQ(elem->ptr->GetName(), "MULTI_QI");
    EXPECT_EQ(elem->ptr->GetObType(), CObObject::ob_struct);
    EXPECT_EQ(elem->struc.idx, 2);
    anyvalue = tuple_object->GetElement(4);
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(CTupleObject::_tuple_elem*));
    elem = std::any_cast<CTupleObject::_tuple_elem*>(anyvalue);
    EXPECT_TRUE(elem != nullptr);
    EXPECT_TRUE(elem->ptr != nullptr);
    EXPECT_EQ(elem->ptr->GetName(), "HRESULT");
    EXPECT_EQ(elem->ptr->GetObType(), CObObject::ob_basetype);
    // test failed issue.
    test_vr_struct1 = lexer_vr_object.GetIdentifier("test_vr_struct1.Data5->DomainLen");
    EXPECT_EQ(test_vr_struct1, nullptr);
    test_vr_struct1 = lexer_vr_object.GetIdentifier("*test_vr_struct1.Data5->DomainLength");
    EXPECT_EQ(test_vr_struct1, nullptr);
    test_vr_struct1 = lexer_vr_object.GetIdentifier("*(test_vr_struct1.Data5).DomainLength");
    EXPECT_TRUE(test_vr_struct1 != nullptr);
    test_vr_struct1 = lexer_vr_object.GetIdentifier("test_vr_struct1.Data4->DomainLength");
    EXPECT_EQ(test_vr_struct1, nullptr);
    test_vr_struct2 = lexer_vr_object.GetIdentifier("*test_vr_struct2.Data2->Data5->Password");
    EXPECT_EQ(test_vr_struct2, nullptr);
    test_vr_struct2 = lexer_vr_object.GetIdentifier("*(test_vr_struct2.Data2).Data5->Password");
    EXPECT_EQ(test_vr_struct2, nullptr);
    test_vr_struct2 = lexer_vr_object.GetIdentifier("*(*(test_vr_struct2.Data2)).Data5->Password");
    EXPECT_EQ(test_vr_struct2, nullptr);
    test_vr_var1 = lexer_vr_object.GetIdentifier("test_var1.v1");
    EXPECT_EQ(test_vr_var1, nullptr);
    test_vr_var1 = lexer_vr_object.GetIdentifier("**test_var1");
    EXPECT_EQ(test_vr_var1, nullptr);
    test_vr_var1 = lexer_vr_object.GetIdentifier("*(*test_var1)");
    EXPECT_EQ(test_vr_var1, nullptr);
    test_vr_var1 = lexer_vr_object.GetIdentifier("*((test_var1))");
    EXPECT_EQ(test_vr_var1, nullptr);
    test_vr_arr = lexer_vr_object.GetIdentifier("(test_arr[101])->dwAuthnLevel");
    EXPECT_EQ(test_vr_arr, nullptr);
    test_vr_arr = lexer_vr_object.GetIdentifier("(test_arr[0])->dwAuthnLevel");
    EXPECT_TRUE(test_vr_arr != nullptr);
    test_vr_arr = lexer_vr_object.GetIdentifier("test_arr[20]->dwAuthnLevel");
    EXPECT_TRUE(test_vr_arr != nullptr);
    test_vr_arr = lexer_vr_object.GetIdentifier("*(test_arr[20]).dwAuthnLevel");
    EXPECT_TRUE(test_vr_arr != nullptr);
    test_vr_arr = lexer_vr_object.GetIdentifier("(test_arr[50]).dwAuthnLevel");
    EXPECT_EQ(test_vr_arr, nullptr);
    test_vr_arr = lexer_vr_object.GetIdentifier("(test_arr[20])->pAuthIdentityDate");
    EXPECT_EQ(test_vr_arr, nullptr);
    test_vr_adt4 = lexer_vr_object.GetIdentifier("*test_adt4.Data4[2].hr");
    EXPECT_EQ(test_vr_adt4, nullptr);
    test_vr_adt4 = lexer_vr_object.GetIdentifier("*(test_adt4.Data4[1]).hr");
    EXPECT_EQ(test_vr_adt4, nullptr);
    test_vr_adt4 = lexer_vr_object.GetIdentifier("(*test_adt4).Data4[0].hr");
    EXPECT_TRUE(test_vr_adt4 != nullptr);
}

// test CLexerVr
TEST_F(HookLexerTest, CTupleObject_GetValue_Test)
{
    CLexerVr lexer_vr_object;
    // test common variant
    DWORD exit_flags = EWX_SHUTDOWN | EWX_FORCE;
    DWORD* lp_exit_flags = &exit_flags;
    std::shared_ptr<CObObject> test_var = CLexerTy::GetInstance().GetIdentifier("TEST_ADT2");
    ASSERT_TRUE(test_var != nullptr);
    ASSERT_TRUE(lexer_vr_object.AddIdentifier(IDENPAIR("test_var1", test_var)));
    std::shared_ptr<CObObject> test_vr_var1 = lexer_vr_object.GetIdentifier("*test_var1");
    ASSERT_TRUE(test_vr_var1 != nullptr);
    ASSERT_TRUE(test_vr_var1->GetObType() == CObObject::ob_tuple);
    std::shared_ptr<CTupleObject> tuple_object = std::static_pointer_cast<CTupleObject>(test_vr_var1);
    std::any anyvalue = tuple_object->GetValue((char*)&lp_exit_flags);
    ASSERT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(std::string));
    EXPECT_EQ(std::any_cast<std::string>(anyvalue), "EWX_FORCE | EWX_LOGOFF | EWX_SHUTDOWN");
    anyvalue = tuple_object->GetElement(static_cast<unsigned int>(-1));
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(CTupleObject::_tuple_elem*));
    auto elem = std::any_cast<CTupleObject::_tuple_elem*>(anyvalue);
    EXPECT_TRUE(elem != nullptr);
    EXPECT_TRUE(elem->ptr != nullptr);
    EXPECT_EQ(elem->ptr->GetObType(), CObObject::ob_flag);
    elem->flag.tuple_flg = CTupleObject::_tuple_flg::tuple_flg_int;
    anyvalue = tuple_object->GetValue((char*)&lp_exit_flags);
    unsigned int n_flags = ConvertAnyType<unsigned int>(anyvalue);
    EXPECT_EQ(n_flags, EWX_SHUTDOWN | EWX_FORCE);
    // test array
    USHORT test_user[10] = { 1 };
    ULONG test_userlength = sizeof(test_user);
    USHORT test_domain[5] = { 5 };
    ULONG_PTR test_domainlength = sizeof(test_domain);
    USHORT test_password[8] = { 8 };
    ULONG test_passwordlength = sizeof(test_password);
    ULONG test_flags = 0x400;
    USHORT test_user_1[7] = { 33 };
    ULONG_PTR test_userlength_1 = sizeof(test_user_1);
    USHORT test_password_1[16] = { 55 };
    ULONG test_passwordlength_1 = sizeof(test_password_1);
    WCHAR* test_description = L"user name and password not empty!";
    COAUTHIDENTITY_TEST test_coa_struct = { test_user , test_userlength ,test_domain , test_domainlength , test_password , test_passwordlength , test_flags, test_description };
    WCHAR szServerPrincName[] = L"self test server 1";
    COAUTHINFO auth_info = {};
    auth_info.dwAuthnSvc = 5;
    auth_info.dwAuthzSvc = 16;
    auth_info.pwszServerPrincName = szServerPrincName;
    auth_info.dwAuthnLevel = 3;
    auth_info.dwImpersonationLevel = 0xff;
    auth_info.pAuthIdentityData = (COAUTHIDENTITY*)&test_coa_struct;
    auth_info.dwCapabilities = 100;
    COAUTHINFO* auth_info_arr[100] = {};
    auth_info_arr[20] = &auth_info;
    std::shared_ptr<CObObject> test_arr = CLexerTy::GetInstance().GetIdentifier("TEST_ADT3");
    ASSERT_TRUE(test_arr != nullptr);
    ASSERT_TRUE(lexer_vr_object.AddIdentifier(IDENPAIR("test_arr", test_arr)));
    std::shared_ptr<CObObject> test_vr_arr = lexer_vr_object.GetIdentifier("(test_arr[20])->dwAuthnLevel");
    ASSERT_TRUE(test_vr_arr != nullptr);
    ASSERT_TRUE(test_vr_arr->GetObType() == CObObject::ob_tuple);
    tuple_object = std::static_pointer_cast<CTupleObject>(test_vr_arr);
    anyvalue = tuple_object->GetValue((char*)auth_info_arr);
    ASSERT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(DWORD));
    EXPECT_EQ(std::any_cast<DWORD>(anyvalue), auth_info_arr[20]->dwAuthnLevel);
    auth_info_arr[99] = &auth_info;
    test_vr_arr = lexer_vr_object.GetIdentifier("(test_arr[99])->pAuthIdentityData->PasswordLength");
    ASSERT_TRUE(test_vr_arr != nullptr);
    ASSERT_TRUE(test_vr_arr->GetObType() == CObObject::ob_tuple);
    tuple_object = std::static_pointer_cast<CTupleObject>(test_vr_arr);
    anyvalue = tuple_object->GetValue((char*)auth_info_arr);
    ASSERT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(ULONG));
    EXPECT_EQ(std::any_cast<DWORD>(anyvalue), auth_info_arr[99]->pAuthIdentityData->PasswordLength);
    auth_info_arr[0] = &auth_info;
    test_vr_arr = lexer_vr_object.GetIdentifier("(test_arr[0])->pwszServerPrincName");
    ASSERT_TRUE(test_vr_arr != nullptr);
    ASSERT_TRUE(test_vr_arr->GetObType() == CObObject::ob_tuple);
    tuple_object = std::static_pointer_cast<CTupleObject>(test_vr_arr);
    anyvalue = tuple_object->GetValue((char*)auth_info_arr);
    ASSERT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(std::wstring));
    EXPECT_EQ(std::any_cast<std::wstring>(anyvalue), auth_info_arr[0]->pwszServerPrincName);
    auth_info_arr[78] = &auth_info;
    test_vr_arr = lexer_vr_object.GetIdentifier("*(test_arr[78]->pAuthIdentityData).Domain");
    ASSERT_TRUE(test_vr_arr != nullptr);
    ASSERT_TRUE(test_vr_arr->GetObType() == CObObject::ob_tuple);
    tuple_object = std::static_pointer_cast<CTupleObject>(test_vr_arr);
    anyvalue = tuple_object->GetValue((char*)auth_info_arr);
    ASSERT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(PVOID));
    EXPECT_EQ(std::any_cast<PVOID>(anyvalue), auth_info_arr[78]->pAuthIdentityData->Domain);
}

// test CLexerVr
TEST_F(HookLexerTest, CTupleObject_SetValue_Test)
{
    CLexerVr lexer_vr_object;
    // test common variant
    DWORD exit_flags = EWX_SHUTDOWN | EWX_FORCE;
    DWORD* lp_exit_flags = &exit_flags;
    std::shared_ptr<CObObject> test_var = CLexerTy::GetInstance().GetIdentifier("TEST_ADT2");
    ASSERT_TRUE(test_var != nullptr);
    ASSERT_TRUE(lexer_vr_object.AddIdentifier(IDENPAIR("test_var1", test_var)));
    std::shared_ptr<CObObject> test_vr_var1 = lexer_vr_object.GetIdentifier("*test_var1");
    ASSERT_TRUE(test_vr_var1 != nullptr);
    ASSERT_TRUE(test_vr_var1->GetObType() == CObObject::ob_tuple);
    std::shared_ptr<CTupleObject> tuple_object = std::static_pointer_cast<CTupleObject>(test_vr_var1);
    std::any anyvalue = tuple_object->GetElement(static_cast<unsigned int>(-1));
    EXPECT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(CTupleObject::_tuple_elem*));
    auto elem = std::any_cast<CTupleObject::_tuple_elem*>(anyvalue);
    EXPECT_TRUE(elem != nullptr);
    EXPECT_TRUE(elem->ptr != nullptr);
    EXPECT_EQ(elem->ptr->GetObType(), CObObject::ob_flag);
    elem->flag.tuple_flg = CTupleObject::_tuple_flg::tuple_flg_int;
    anyvalue = tuple_object->GetValue((char*)&lp_exit_flags);
    unsigned int n_flags = ConvertAnyType<unsigned int>(anyvalue);
    EXPECT_EQ(n_flags, EWX_SHUTDOWN | EWX_FORCE);
    ASSERT_TRUE(AssignAnyType(anyvalue, EWX_REBOOT | EWX_FORCEIFHUNG));
    ASSERT_TRUE(tuple_object->SetValue((char*)&lp_exit_flags, anyvalue));
    anyvalue = tuple_object->GetValue((char*)&lp_exit_flags);
    n_flags = ConvertAnyType<unsigned int>(anyvalue);
    EXPECT_EQ(n_flags, EWX_REBOOT | EWX_FORCEIFHUNG);
    // test array
    USHORT test_user[10] = { 1 };
    ULONG test_userlength = sizeof(test_user);
    USHORT test_domain[5] = { 5 };
    ULONG_PTR test_domainlength = sizeof(test_domain);
    USHORT test_password[8] = { 8 };
    ULONG test_passwordlength = sizeof(test_password);
    ULONG test_flags = 0x400;
    USHORT test_user_1[7] = { 33 };
    ULONG_PTR test_userlength_1 = sizeof(test_user_1);
    USHORT test_password_1[16] = { 55 };
    ULONG test_passwordlength_1 = sizeof(test_password_1);
    WCHAR* test_description = L"user name and password not empty!";
    COAUTHIDENTITY_TEST test_coa_struct = { test_user , test_userlength ,test_domain , test_domainlength , test_password , test_passwordlength , test_flags, test_description };
    WCHAR szServerPrincName[] = L"self test server 1";
    COAUTHINFO auth_info = {};
    auth_info.dwAuthnSvc = 5;
    auth_info.dwAuthzSvc = 16;
    auth_info.pwszServerPrincName = szServerPrincName;
    auth_info.dwAuthnLevel = 3;
    auth_info.dwImpersonationLevel = 0xff;
    auth_info.pAuthIdentityData = (COAUTHIDENTITY*)&test_coa_struct;
    auth_info.dwCapabilities = 100;
    COAUTHINFO* auth_info_arr[100] = {};
    auth_info_arr[20] = &auth_info;
    std::shared_ptr<CObObject> test_arr = CLexerTy::GetInstance().GetIdentifier("TEST_ADT3");
    ASSERT_TRUE(test_arr != nullptr);
    ASSERT_TRUE(lexer_vr_object.AddIdentifier(IDENPAIR("test_arr", test_arr)));
    std::shared_ptr<CObObject> test_vr_arr = lexer_vr_object.GetIdentifier("(test_arr[20])->dwAuthnLevel");
    ASSERT_TRUE(test_vr_arr != nullptr);
    ASSERT_TRUE(test_vr_arr->GetObType() == CObObject::ob_tuple);
    tuple_object = std::static_pointer_cast<CTupleObject>(test_vr_arr);
    anyvalue = tuple_object->GetValue((char*)auth_info_arr);
    ASSERT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(DWORD));
    EXPECT_EQ(std::any_cast<DWORD>(anyvalue), auth_info_arr[20]->dwAuthnLevel);
    ASSERT_TRUE(AssignAnyType(anyvalue, 8));
    ASSERT_TRUE(tuple_object->SetValue((char*)&auth_info_arr, anyvalue));
    EXPECT_EQ(auth_info_arr[20]->dwAuthnLevel, 8);
    auth_info_arr[99] = &auth_info;
    test_vr_arr = lexer_vr_object.GetIdentifier("(test_arr[99])->pAuthIdentityData->PasswordLength");
    ASSERT_TRUE(test_vr_arr != nullptr);
    ASSERT_TRUE(test_vr_arr->GetObType() == CObObject::ob_tuple);
    tuple_object = std::static_pointer_cast<CTupleObject>(test_vr_arr);
    anyvalue = tuple_object->GetValue((char*)auth_info_arr);
    ASSERT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(ULONG));
    EXPECT_EQ(std::any_cast<DWORD>(anyvalue), auth_info_arr[99]->pAuthIdentityData->PasswordLength);
    ASSERT_TRUE(AssignAnyType(anyvalue, 11));
    ASSERT_TRUE(tuple_object->SetValue((char*)&auth_info_arr, anyvalue));
    EXPECT_EQ(auth_info_arr[99]->pAuthIdentityData->PasswordLength, 11);
    auth_info_arr[0] = &auth_info;
    test_vr_arr = lexer_vr_object.GetIdentifier("(test_arr[0])->pwszServerPrincName");
    ASSERT_TRUE(test_vr_arr != nullptr);
    ASSERT_TRUE(test_vr_arr->GetObType() == CObObject::ob_tuple);
    tuple_object = std::static_pointer_cast<CTupleObject>(test_vr_arr);
    anyvalue = tuple_object->GetValue((char*)auth_info_arr);
    ASSERT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(std::wstring));
    EXPECT_EQ(std::any_cast<std::wstring>(anyvalue), auth_info_arr[0]->pwszServerPrincName);
    ASSERT_TRUE(AssignAnyType<wchar_t*>(anyvalue, L"self test server 9"));
    ASSERT_TRUE(tuple_object->SetValue((char*)&auth_info_arr, anyvalue));
    EXPECT_STREQ(auth_info_arr[0]->pwszServerPrincName, L"self test server 9");
    auth_info_arr[78] = &auth_info;
    test_vr_arr = lexer_vr_object.GetIdentifier("*(test_arr[78]->pAuthIdentityData).Domain");
    ASSERT_TRUE(test_vr_arr != nullptr);
    ASSERT_TRUE(test_vr_arr->GetObType() == CObObject::ob_tuple);
    tuple_object = std::static_pointer_cast<CTupleObject>(test_vr_arr);
    anyvalue = tuple_object->GetValue((char*)auth_info_arr);
    ASSERT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(PVOID));
    EXPECT_EQ(std::any_cast<PVOID>(anyvalue), auth_info_arr[78]->pAuthIdentityData->Domain);
    ASSERT_TRUE(AssignAnyType<PVOID>(anyvalue, nullptr));
    ASSERT_TRUE(tuple_object->SetValue((char*)&auth_info_arr, anyvalue));
    EXPECT_EQ(auth_info_arr[78]->pAuthIdentityData->Domain, nullptr);
    test_vr_arr = lexer_vr_object.GetIdentifier("test_arr[78]");
    ASSERT_TRUE(test_vr_arr != nullptr);
    ASSERT_TRUE(test_vr_arr->GetObType() == CObObject::ob_tuple);
    tuple_object = std::static_pointer_cast<CTupleObject>(test_vr_arr);
    anyvalue = tuple_object->GetValue((char*)auth_info_arr);
    ASSERT_TRUE(anyvalue.has_value() && anyvalue.type() == typeid(PVOID));
    EXPECT_EQ(std::any_cast<PVOID>(anyvalue), auth_info_arr[78]);
    ASSERT_TRUE(AssignAnyType<PVOID>(anyvalue, nullptr));
    ASSERT_TRUE(tuple_object->SetValue((char*)&auth_info_arr, anyvalue));
    EXPECT_EQ(auth_info_arr[78], nullptr);
}

TEST_F(HookLexerTest, CTupleObject_IsValidValue_Test)
{
    CLexerVr lexer_vr_object;
    // test common variant
    DWORD exit_flags = EWX_SHUTDOWN | EWX_FORCE;
    DWORD* lp_exit_flags = &exit_flags;
    std::shared_ptr<CObObject> test_var1 = CLexerTy::GetInstance().GetIdentifier("TEST_ADT2");
    ASSERT_TRUE(test_var1 != nullptr);
    ASSERT_TRUE(lexer_vr_object.AddIdentifier(IDENPAIR("test_var1", test_var1)));
    std::shared_ptr<CObObject> test_vr_var1 = lexer_vr_object.GetIdentifier("test_var1");
    EXPECT_TRUE(test_vr_var1->IsValidValue((char*)&lp_exit_flags));
    lp_exit_flags = nullptr;
    EXPECT_FALSE(test_vr_var1->IsValidValue((char*)&lp_exit_flags));
    wchar_t wchar_str[] = L"test_wstring";
    BSTR bstr = wchar_str;
    std::shared_ptr<CObObject> test_var2 = CLexerTy::GetInstance().GetIdentifier("BSTR");
    ASSERT_TRUE(test_var2 != nullptr);
    ASSERT_TRUE(lexer_vr_object.AddIdentifier(IDENPAIR("test_var2", test_var2)));
    std::shared_ptr<CObObject> test_vr_var2 = lexer_vr_object.GetIdentifier("test_var2");
    EXPECT_TRUE(test_vr_var2->IsValidValue((char*)&bstr));
    bstr = nullptr;
    EXPECT_FALSE(test_vr_var2->IsValidValue((char*)&bstr));
    // test array
    USHORT test_user[10] = { 1 };
    ULONG test_userlength = sizeof(test_user);
    USHORT test_domain[5] = { 5 };
    ULONG_PTR test_domainlength = sizeof(test_domain);
    USHORT test_password[8] = { 8 };
    ULONG test_passwordlength = sizeof(test_password);
    ULONG test_flags = 0x400;
    USHORT test_user_1[7] = { 33 };
    ULONG_PTR test_userlength_1 = sizeof(test_user_1);
    USHORT test_password_1[16] = { 55 };
    ULONG test_passwordlength_1 = sizeof(test_password_1);
    WCHAR* test_description = L"user name and password not empty!";
    COAUTHIDENTITY_TEST test_coa_struct = { test_user , test_userlength ,test_domain , test_domainlength , test_password , test_passwordlength , test_flags, test_description };
    WCHAR szServerPrincName[] = L"self test server 1";
    COAUTHINFO auth_info = {};
    auth_info.dwAuthnSvc = 5;
    auth_info.dwAuthzSvc = 16;
    auth_info.pwszServerPrincName = szServerPrincName;
    auth_info.dwAuthnLevel = 3;
    auth_info.dwImpersonationLevel = 0xff;
    auth_info.pAuthIdentityData = (COAUTHIDENTITY*)&test_coa_struct;
    auth_info.dwCapabilities = 100;
    COAUTHINFO* auth_info_arr[100] = {};
    auth_info_arr[20] = &auth_info;
    std::shared_ptr<CObObject> test_arr = CLexerTy::GetInstance().GetIdentifier("TEST_ADT3");
    ASSERT_TRUE(test_arr != nullptr);
    ASSERT_TRUE(lexer_vr_object.AddIdentifier(IDENPAIR("test_arr", test_arr)));
    std::shared_ptr<CObObject> test_vr_arr = lexer_vr_object.GetIdentifier("*(test_arr[20]).pwszServerPrincName");
    ASSERT_TRUE(test_vr_arr != nullptr);
    ASSERT_TRUE(test_vr_arr->GetObType() == CObObject::ob_tuple);
    EXPECT_TRUE(test_vr_arr->IsValidValue((char*)auth_info_arr));
    auth_info.pwszServerPrincName = nullptr;
    EXPECT_FALSE(test_vr_arr->IsValidValue((char*)auth_info_arr));
    test_vr_arr = lexer_vr_object.GetIdentifier("*(test_arr[20]->pAuthIdentityData).Domain");
    ASSERT_TRUE(test_vr_arr != nullptr);
    ASSERT_TRUE(test_vr_arr->GetObType() == CObObject::ob_tuple);
    EXPECT_TRUE(test_vr_arr->IsValidValue((char*)auth_info_arr));
    test_coa_struct.Domain = nullptr;
    EXPECT_FALSE(test_vr_arr->IsValidValue((char*)auth_info_arr));
    test_vr_arr = lexer_vr_object.GetIdentifier("test_arr[20]");
    ASSERT_TRUE(test_vr_arr != nullptr);
    ASSERT_TRUE(test_vr_arr->GetObType() == CObObject::ob_tuple);
    EXPECT_TRUE(test_vr_arr->IsValidValue((char*)auth_info_arr));
    auth_info_arr[20] = nullptr;
    EXPECT_FALSE(test_vr_arr->IsValidValue((char*)auth_info_arr));
}

TEST_F(HookLexerTest, CTupleObject_Success_Test)
{
    CLexerVr lexer_vr_object;
    // test common variant
    DWORD exit_flags = EWX_SHUTDOWN | EWX_FORCE;
    DWORD* lp_exit_flags = &exit_flags;
    std::shared_ptr<CObObject> test_var1 = CLexerTy::GetInstance().GetIdentifier("TEST_ADT2");
    ASSERT_TRUE(test_var1 != nullptr);
    ASSERT_TRUE(lexer_vr_object.AddIdentifier(IDENPAIR("test_var1", test_var1)));
    std::shared_ptr<CObObject> test_vr_var1 = lexer_vr_object.GetIdentifier("test_var1");
    EXPECT_TRUE(test_vr_var1->Success((char*)&lp_exit_flags));
    lp_exit_flags = nullptr;
    EXPECT_TRUE(test_vr_var1->Failed((char*)&lp_exit_flags));
    wchar_t wchar_str[] = L"test_wstring";
    BSTR bstr = wchar_str;
    std::shared_ptr<CObObject> test_var2 = CLexerTy::GetInstance().GetIdentifier("BSTR");
    ASSERT_TRUE(test_var2 != nullptr);
    ASSERT_TRUE(lexer_vr_object.AddIdentifier(IDENPAIR("test_var2", test_var2)));
    std::shared_ptr<CObObject> test_vr_var2 = lexer_vr_object.GetIdentifier("test_var2");
    EXPECT_TRUE(test_vr_var2->Success((char*)&bstr));
    bstr = nullptr;
    EXPECT_TRUE(test_vr_var2->Failed((char*)&bstr));
    NTSTATUS status = 0;
    NTSTATUS* lp_status = &status;
    std::shared_ptr<CObObject> test_var3 = CLexerTy::GetInstance().GetIdentifier("NTSTATUS*");
    ASSERT_TRUE(test_var3 != nullptr);
    ASSERT_TRUE(lexer_vr_object.AddIdentifier(IDENPAIR("test_var3", test_var3)));
    std::shared_ptr<CObObject> test_vr_var3 = lexer_vr_object.GetIdentifier("*test_var3");
    EXPECT_TRUE(test_vr_var3->Success((char*)&lp_status));
    status = 256;
    EXPECT_TRUE(test_vr_var3->Success((char*)&lp_status));
    status = 0x80000005;
    EXPECT_TRUE(test_vr_var3->Failed((char*)&lp_status));
    TEST_STRUCT2 test_ts_struct = {};
    test_ts_struct.Data4[0].hr = S_OK;
    test_ts_struct.Data4[1].hr = S_FALSE;
    std::shared_ptr<CObObject> test_struct = CLexerTy::GetInstance().GetIdentifier("TEST_STRUCT2");
    ASSERT_TRUE(test_struct != nullptr);
    ASSERT_TRUE(lexer_vr_object.AddIdentifier(IDENPAIR("test_vr_struct", test_struct)));
    std::shared_ptr<CObObject> test_vr_struct = lexer_vr_object.GetIdentifier("test_vr_struct.Data4[0].hr");
    ASSERT_TRUE(test_vr_struct != nullptr);
    ASSERT_TRUE(test_vr_struct->GetObType() == CObObject::ob_tuple);
    EXPECT_TRUE(test_vr_struct->Success((char*)&test_ts_struct));
    test_ts_struct.Data4[0].hr = -1;
    EXPECT_TRUE(test_vr_struct->Failed((char*)&test_ts_struct));
    test_struct = CLexerTy::GetInstance().GetIdentifier("MULTI_QI");
    ASSERT_TRUE(test_struct != nullptr);
    ASSERT_TRUE(lexer_vr_object.AddIdentifier(IDENPAIR("test_vr_struct2", test_struct)));
    test_vr_struct = lexer_vr_object.GetIdentifier("test_vr_struct2.hr");
    ASSERT_TRUE(test_vr_struct != nullptr);
    ASSERT_TRUE(test_vr_struct->GetObType() == CObObject::ob_tuple);
    EXPECT_TRUE(test_vr_struct->Success((char*)&test_ts_struct.Data4[1]));
}

TEST_F(HookLexerTest, CExpParsing_ParsingAndEval_Test)
{
    CExpParsing::_ValueMap value_map;
    CExpParsing::ValuePair iden_pair;
    std::any anyvalue;
    DWORD exit_flag = EWX_SHUTDOWN | EWX_FORCE;
    DWORD load_flag = LOAD_IGNORE_CODE_AUTHZ_LEVEL | LOAD_LIBRARY_SEARCH_SYSTEM32;
    DWORD* p_flag = &load_flag;
    std::shared_ptr<CParsing> parent_object = std::make_shared<CParsing>(nullptr);
    ASSERT_TRUE(parent_object != nullptr);
    std::shared_ptr<CParsing> parsing_object = std::make_shared<CParsing>(parent_object);
    CExpParsing exp_parsing_object;
    ASSERT_TRUE(parsing_object != nullptr);
    parsing_object->SetAlias(CExpParsing::GetTokenVarDef());
    std::shared_ptr<CObObject> test_var = CLexerTy::GetInstance().GetIdentifier("EXITFLAGS");
    ASSERT_TRUE(test_var != nullptr);
    ASSERT_TRUE(parent_object->AddIdentifier(IDENPAIR("test_var", test_var)));
    test_var = parsing_object->GetIdentifier("test_var");
    ASSERT_TRUE(test_var != nullptr);
    ASSERT_TRUE(parsing_object->AddIdentifier(IDENPAIR("test_var", test_var)));
    test_var = parsing_object->GetIdentifier("%var0");
    ASSERT_TRUE(test_var != nullptr);
    test_var = CLexerTy::GetInstance().GetIdentifier("LOADFLAGS*");
    ASSERT_TRUE(test_var != nullptr);
    ASSERT_TRUE(parent_object->AddIdentifier(IDENPAIR("test_var1", test_var)));
    test_var = parsing_object->GetIdentifier("*test_var1");
    ASSERT_TRUE(test_var != nullptr);
    ASSERT_TRUE(parsing_object->AddIdentifier(IDENPAIR("*test_var1", test_var)));
    test_var = parsing_object->GetIdentifier("%var1");
    ASSERT_TRUE(test_var != nullptr);
    ASSERT_TRUE(exp_parsing_object.Parsing("3*5", parsing_object));
    auto& expression_ast = exp_parsing_object.GetExpressionAst();
    ASSERT_EQ(expression_ast.size(), 1);
    std::shared_ptr<CExpParsing::_Value> value = expression_ast.front();
    ASSERT_TRUE(value != nullptr);
    EXPECT_TRUE(value->isIntegral());
    EXPECT_EQ(value->GetIntegral(), 3 * 5);
    exp_parsing_object.Clear();
    ASSERT_TRUE(exp_parsing_object.Parsing("3*5+4/(54-52)+16-7", parsing_object));
    ASSERT_EQ(expression_ast.size(), 1);
    value = expression_ast.front();
    ASSERT_TRUE(value != nullptr);
    EXPECT_TRUE(value->isIntegral());
    EXPECT_EQ(value->GetIntegral(), (3 * 5 + 4 / (54 - 52) + 16 - 7));
    exp_parsing_object.Clear();
    exp_parsing_object.Parsing("%var0+3*5-12/6+1/1-2*3", parsing_object);
    ASSERT_EQ(expression_ast.size(), 9);
    test_var = exp_parsing_object.GetTokenIdentifier("%var0");
    ASSERT_TRUE(test_var != nullptr);
    anyvalue = test_var->GetValue((char*)&exit_flag);
    iden_pair = CExpParsing::ValuePair("%var0", anyvalue);
    ASSERT_TRUE(exp_parsing_object.SetIdentifierValue(value_map, iden_pair));
    ASSERT_EQ(value_map.size(), 1);
    auto variant_value = exp_parsing_object.EvalExpression(value_map);
    ASSERT_EQ(variant_value.index(), 0);
    EXPECT_EQ(std::get<ULONGLONG>(variant_value), exit_flag + 3 * 5 - 12 / 6 + 1 / 1 - 2 * 3);
    exp_parsing_object.Clear();
    value_map.clear();
    exp_parsing_object.Parsing("(%var1 !='LOAD_IGNORE_CODE_AUTHZ_LEVEL')&& (%var1!= 'LOAD_LIBRARY_SEARCH_SYSTEM32')", parsing_object);
    ASSERT_EQ(expression_ast.size(), 7);
    test_var = exp_parsing_object.GetTokenIdentifier("%var1");
    ASSERT_TRUE(test_var != nullptr);
    anyvalue = test_var->GetValue((char*)&p_flag);
    iden_pair = CExpParsing::ValuePair("%var1", anyvalue);
    ASSERT_TRUE(exp_parsing_object.SetIdentifierValue(value_map, iden_pair));
    ASSERT_EQ(value_map.size(), 1);
    variant_value = exp_parsing_object.EvalExpression(value_map);
    ASSERT_EQ(variant_value.index(), 0);
    EXPECT_EQ(std::get<ULONGLONG>(variant_value), 1);
    value_map.clear();
    load_flag = LOAD_LIBRARY_SEARCH_USER_DIRS;
    anyvalue = test_var->GetValue((char*)&p_flag);
    iden_pair = CExpParsing::ValuePair("%var1", anyvalue);
    ASSERT_TRUE(exp_parsing_object.SetIdentifierValue(value_map, iden_pair));
    ASSERT_EQ(value_map.size(), 1);
    variant_value = exp_parsing_object.EvalExpression(value_map);
    ASSERT_EQ(variant_value.index(), 0);
    EXPECT_EQ(std::get<ULONGLONG>(variant_value), 1);
    value_map.clear();
    load_flag = LOAD_LIBRARY_SEARCH_SYSTEM32;
    anyvalue = test_var->GetValue((char*)&p_flag);
    iden_pair = CExpParsing::ValuePair("%var1", anyvalue);
    ASSERT_TRUE(exp_parsing_object.SetIdentifierValue(value_map, iden_pair));
    ASSERT_EQ(value_map.size(), 1);
    variant_value = exp_parsing_object.EvalExpression(value_map);
    ASSERT_EQ(variant_value.index(), 0);
    EXPECT_EQ(std::get<ULONGLONG>(variant_value), 0);
    value_map.clear();
    load_flag = LOAD_IGNORE_CODE_AUTHZ_LEVEL;
    anyvalue = test_var->GetValue((char*)&p_flag);
    iden_pair = CExpParsing::ValuePair("%var1", anyvalue);
    ASSERT_TRUE(exp_parsing_object.SetIdentifierValue(value_map, iden_pair));
    ASSERT_EQ(value_map.size(), 1);
    variant_value = exp_parsing_object.EvalExpression(value_map);
    ASSERT_EQ(variant_value.index(), 0);
    EXPECT_EQ(std::get<ULONGLONG>(variant_value), 0);
    exp_parsing_object.Clear();
    value_map.clear();
    exp_parsing_object.Parsing("%var1 = 'Default System BIOS'", parsing_object);
    ASSERT_EQ(expression_ast.size(), 3);
    
    //exp_parsing_object.Parsing("(%var0 & 1) || (%var0 & 2) || (%var0 & 8)", parsing_object);
    //exp_parsing_object.Clear();
    //exp_parsing_object.Parsing("%var0+(3*5-12/6+1/1-2*3)", parsing_object);
    //exp_parsing_object.Clear();
}

#endif
